<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zzJoeyyy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zzjoeyyy.com/"/>
  <updated>2018-11-15T11:37:55.113Z</updated>
  <id>http://zzjoeyyy.com/</id>
  
  <author>
    <name>zzJoeyyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习笔记</title>
    <link href="http://zzjoeyyy.com/2018/11/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zzjoeyyy.com/2018/11/15/深度学习笔记/</id>
    <published>2018-11-15T06:41:54.000Z</published>
    <updated>2018-11-15T11:37:55.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络和深度学习"><a href="#神经网络和深度学习" class="headerlink" title="神经网络和深度学习"></a>神经网络和深度学习</h1><p>学习自<a href="http://study.163.com" target="_blank" rel="noopener">网易云课堂</a>,参考<a href="https://zhuanlan.zhihu.com/aiclass" target="_blank" rel="noopener">吴恩达深度学习课程辅导</a>、<a href="http://binweber.top/tags/ML/" target="_blank" rel="noopener">Weber</a></p><p>感谢<a href="http://study.163.com" target="_blank" rel="noopener">网易云课堂</a>和<a href="https://www.deeplearning.ai/" target="_blank" rel="noopener">deeplearning.ai</a>，非常感谢Andrew Ng老师，图片来自课件文档</p><a id="more"></a><p>第一章多为介绍和了解，所以笔记主要从第二章开始</p><p>笔记主要是自己的理解，可能有很多不到位或者错误的地方，恳请读者纠正，谢谢您！</p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>介绍,了解</p><hr><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="2-1-二分分类"><a href="#2-1-二分分类" class="headerlink" title="2.1 二分分类"></a>2.1 二分分类</h2><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-1-1.png" alt="2-1-1"></p><!-- more --><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-1-3.png" alt="2-1-3"></p><p>每张图片，都是三个独立矩阵构成的，分为RGB三个颜色通道</p><p>比如这张假设输入是64<em>64分辨率的图片，把它的像素亮度提取出来，放入一个特征向量x中(y为输出向量，为0/1表示否/是猫)，那特征向量x总维度为64 </em> 64 * 3=12288(0-4096为红色，4097-8192为绿色，8193-12288为蓝色)</p><p>$ lim_{x \to \infty} \ exp(-x)=0 $</p><p>这里用 n~x~/n 来表示输入的特征向量x的维度，这里即是12288 </p><hr><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-1-2.png" alt="2-1-2"></p><p><code>(x,y)</code>来表示单独样本</p><p><code>x</code>是nx维特征向量</p><p><code>y</code>是标签，值为0/1</p><p>训练集由m个训练样本构成</p><p>(x^(1)^,y^(1)^ ) 表示样本1的输入和输出，样本2、3……以此类推</p><p><strong>以上表示整个训练集</strong></p><hr><p><code>m</code>表示训练样本的个数，<code>m=m_train</code>为了强调这是训练样本的个数</p><p><code>m 下标test</code>表示测试集的样本数</p><p><code>X</code>大写X表示一个矩阵，由训练集中的x1,x2,x3…按列排序组成(x^(1)为第一列，x^(2)为第二列，以此类推)</p><p><strong>矩阵有m列，为训练集样本数，矩阵高度为nx，输入特征向量的维度</strong></p><p><strong>构建神经网络时，使用这种按列排序(列向量堆叠)可以让过程简单</strong></p><p><code>X.shape</code>是一条Python命令，输出矩阵维度(nx * m)</p><hr><p><code>Y</code>大写Y表示一个矩阵，由y标签组成，是个行矩阵，高度为1，宽度为m</p><p><code>Y.shape</code>Python命令输出(1,m)</p><hr><h2 id="2-2-logistic回归"><a href="#2-2-logistic回归" class="headerlink" title="2.2 logistic回归"></a>2.2 logistic回归</h2><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-2-1.png" alt="2-2-1"></p><p><em>y帽</em>：对y的预测值，概率</p><p><em>w</em>：Logistic回归参数，n~x~维向量</p><p><em>b</em> ：实数</p><p>输入x和实数w,b，预测y帽</p><p>在Logistic回归中，y帽=signoid(一个不准确的量)，为了使输出达到要求(0到1之间)</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-2-3.png" alt="2-2-3"></p><p>$ s={\sigma(w^Tx+b)}={\sigma(z)}={1 \over 1+e^-z}$</p><p>由函数式可以看出来</p><p>${z \to \infty}, {s \to 1}$</p><p>${z \to 0/-\infty},{s \to 0} \ $</p><p>即z趋近正无穷，则s趋向于1；z趋近0或负无穷，则s趋向于0</p><hr><p><strong>符号约定</strong>：不使用如下图所示的符号约定，<strong>注意是不使用！</strong> </p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-2-2.png" width="500px"></p><h2 id="2-3-logistic回归损失函数"><a href="#2-3-logistic回归损失函数" class="headerlink" title="2.3 logistic回归损失函数"></a>2.3 logistic回归损失函数</h2><p>上面得到的公式为:y^ $={\sigma(w^Tx+b)}$,where  $\sigma(z)={1\over 1+e^-z}$</p><p>回归损失函数的引入是为了训练<em>w</em> 和<em>b</em> 参数</p><p>上标(i)：指明数据，表示和第i个样本有关</p><p>损失：y帽和y的差的平方 或 平方的$1\over 2$</p><p>损失方程用来衡量预测输出值<strong>y帽</strong> 和<strong>y的实际值</strong>有多接近</p><hr><p>$\iota$(y^,y) = - (y log y^ + (1-y) log (1-y^))</p><p>使用这个作为损失方程的原因就是：</p><ul><li>y=1时，y^ $\to 1$，来使$\iota$(y^,y)$\to 0$</li><li>y=0时，y^ $\to 0$，来使$\iota$(y^,y)$\to 0$</li></ul><hr><p><strong>损失方程L</strong> 表示在<strong>单个训练样本</strong>上的表现</p><p>另外定义一个<strong>成本函数 J</strong>表示在<strong>全体样本</strong>上的表现</p><p>J(w,b)=$1\over m$ $\sum_{i=1}^{m}$ $\iota$(y^ <sup>(i)</sup>,y<sup>(i)</sup>) =$1\over m$ $\sum_{i=1}^{m}$[- (y<sup>(i)</sup> log y^ <sup>(i)</sup> + (1-y<sup>(i)</sup>) log (1-y^<sup>(i)</sup>))]</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-3-1.png" alt="2-3-1"></p><hr><h2 id="2-4-梯度下降法"><a href="#2-4-梯度下降法" class="headerlink" title="2.4 梯度下降法"></a>2.4 梯度下降法</h2><p>w:=w-$\alpha d{J(w,b)\over dw}$</p><p>b=b-$\alpha d{J(w,b)\over db}$</p><p>:=表示更新</p><p>$\alpha$ 表示学习率</p><p>梯度下降法是为了通过更新 w和b 的值来求出 J(w,b) 的最小值</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-4-1.png" alt="2-4-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-4-2.png" alt="2-4-2"></p><hr><h2 id="2-5-2-8-导数"><a href="#2-5-2-8-导数" class="headerlink" title="2.5-2.8 导数"></a>2.5-2.8 导数</h2><p>简要介绍了导数并结合了例子</p><p>导数我在高等数学中学过了，所以没有笔记</p><hr><h2 id="2-9-Logistic回归中的梯度下降法"><a href="#2-9-Logistic回归中的梯度下降法" class="headerlink" title="2.9 Logistic回归中的梯度下降法"></a>2.9 Logistic回归中的梯度下降法</h2><p><strong>用到的公式</strong></p><p>Z=w^Tx+b</p><p>y^=$\alpha$$={\sigma(z)}={\sigma(w^Tx+b)}={1 \over 1+e^-z}$</p><p>$\iota$(a,y) = - (y log(a) + (1-y) log(1-a))</p><p><strong>sigmoid函数求导</strong></p><p>$\alpha=\frac{1}{1+e^{-z}}$</p><p>$\begin{aligned} \alpha’={da\over dz}=f’(z) &amp;= (\frac{1}{1+e^{-z}})’ \ &amp;= \frac{e^{-z}}{(1+e^{-z})^{2}} \ &amp;= \frac{1+e^{-z}-1}{(1+e^{-z})^{2}} \ &amp;= \frac{1}{(1+e^{-z})}(1-\frac{1}{(1+e^{-z})}) \ &amp;= f(z)(1-f(z)) \ \&amp;=\alpha(1-\alpha)\end{aligned}$</p><p>$\begin{aligned}{d\iota(a,y)\over da} &amp;= - (y log(a) + (1-y) log(1-a)) \ &amp;= -{y\over a}+{1-y\over1-a} \end{aligned}$</p><p>$\begin{aligned}{d\iota(a,y) \over dz}&amp;={d\iota(a,y)\over da}·{da\over dz} \ &amp;=\alpha(1-\alpha)· (-{y\over a}+{1-y\over1-a}) \ &amp;=a-y \end{aligned}$</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-8-1.png" alt="2-8-1"></p><hr><h2 id="2-10-梯度下降法应用到m个样本的Logistic回归"><a href="#2-10-梯度下降法应用到m个样本的Logistic回归" class="headerlink" title="2.10 梯度下降法应用到m个样本的Logistic回归"></a>2.10 梯度下降法应用到m个样本的Logistic回归</h2><p>使用for循环 += 从1到m遍历，再取平均，得 J 的平均值，然后应用 w1:=w1-$\alpha {dw1}$ 更新w1,w2……和b的值</p><p>以上是应用一次梯度下降</p><p>需要多次重复步骤来应用多次梯度下降</p><p>这里需要2个for循环</p><ol><li>遍历m个样本的小循环</li><li>遍历所有特征的循环</li></ol><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-10-1.png" alt="2-10-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-10-2.png" alt="2-10-2"></p><p><strong>后面介绍向量化，以使代码摆脱显式for循环</strong></p><hr><h2 id="2-11-2-12-向量化"><a href="#2-11-2-12-向量化" class="headerlink" title="2.11-2.12  向量化"></a>2.11-2.12  向量化</h2><p>向量化是一门消除代码中显式for循环语句的<strong>艺术</strong></p><p>z=$w^Tx+b$ 中，w和b都是R(实数)内的nx维向量</p><p>计算Z</p><p>非向量化实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_x):</span><br><span class="line">    z+=w[i]*x[i]</span><br><span class="line">    z+=b</span><br></pre></td></tr></table></figure><p>向量化实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z=np.dot(w,x)+b</span><br></pre></td></tr></table></figure><p>效率对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#向量化实现</span></span><br><span class="line">a=np.random.rand(<span class="number">1000000</span>)<span class="comment">#百万维数组</span></span><br><span class="line">b=np.random.rand(<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">tic=time.time()</span><br><span class="line">c=np.dot(a,b)<span class="comment">#数组的内积</span></span><br><span class="line">toc=time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"c:"</span>,c)<span class="comment">#c: 250115.97851</span></span><br><span class="line">print(<span class="string">"vectorized version:"</span>+str(<span class="number">1000</span>*(toc-tic))+<span class="string">"ms"</span>)</span><br><span class="line"><span class="comment">#vectorized version:1.0075569152832031ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#非向量化实现</span></span><br><span class="line">c=<span class="number">0</span></span><br><span class="line">tic=time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">    c+=a[i]*b[i]</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"c:"</span>,c)<span class="comment">#c: 250115.97851</span></span><br><span class="line">toc=time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"for loop:"</span>+str(<span class="number">1000</span>*(toc-tic))+<span class="string">"ms"</span>)</span><br><span class="line"><span class="comment">#for loop:613.6338710784912ms</span></span><br></pre></td></tr></table></figure><p><strong>1ms VS 629ms     高下立现</strong></p><p>如果有可能，尽量不用显式for循环</p><p><strong>更多例子</strong></p><p>非向量化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">u=np.zeros((n,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">u(i)=math.exp(v[i])</span><br></pre></td></tr></table></figure><p>向量化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">u=np.exp(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">#向量值函数</span></span><br><span class="line">no.log(v)<span class="comment">#逐个元素计算log</span></span><br><span class="line">np.Abs(v)<span class="comment">#绝对值</span></span><br><span class="line">np.maximum(v,<span class="number">0</span>)<span class="comment">#求出v中所有元素和0之间相比的最大值</span></span><br><span class="line">v**<span class="number">2</span><span class="comment">#v中每个元素的平方</span></span><br></pre></td></tr></table></figure><p><strong>Logistica回归去掉一个for循环</strong></p><p>1.将dw1和dw2变成n<sub>x</sub>列1行的矩阵</p><p>2.然后直接dw+=x<sup>(i)</sup>dz<sup>(i)</sup></p><p>3.最后dw/=m</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-12-1.png" alt="2-12-1"></p><hr><h2 id="2-13-2-14-向量化Logistic回归"><a href="#2-13-2-14-向量化Logistic回归" class="headerlink" title="2.13-2.14 向量化Logistic回归"></a>2.13-2.14 向量化Logistic回归</h2><p>对于这两个公式</p><p>z=$w^Tx+b$</p><p>$\alpha$$={\sigma(z)}={\sigma(w^Tx+b)}$</p><p>参照之前的做法</p><p>把z<sup>(1)</sup>,z<sup>(2)</sup>等全部变成m维的行矩阵，用 大写Z 表示</p><p>然后x也变成矩阵，用X表示</p><p>接着 Z=[z<sup>(1)</sup>,z<sup>(2)</sup>……z<sup>(m)</sup>]=w<sup>T</sup>X+[b,b…..b]</p><p>这里b本来是一个常数，被加到矩阵上面会自动转化为m维的行矩阵</p><p>这种现象称为，<strong>广播</strong></p><p>对于a也使用上述操作，用A表示</p><p>得到 z的向量化矩阵Z 和 a的向量化矩阵A</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-13-1.png" alt="2-13-1"></p><p>根据之前：dz&lt;sup]&gt;(1)=a&lt;sup]&gt;(1)-b&lt;sup]&gt;(1),dz&lt;sup]&gt;(2)=a&lt;sup]&gt;(2)-b&lt;sup]&gt;(2) ……</p><p>定义：dZ=[dz&lt;sup]&gt;(1),dz&lt;sup]&gt;(2) …..dz&lt;sup]&gt;(m) ]</p><p>​        A=[a&lt;sup]&gt;(1),a&lt;sup]&gt;(2) …..a&lt;sup]&gt;(m)]</p><p>​        Y=[y&lt;sup]&gt;(1),y&lt;sup]&gt;(2) …..y&lt;sup]&gt;(m)]</p><p>dZ、A、Y 是一个1*m的矩阵</p><p>得到：dZ=A-Y=[a&lt;sup]&gt;(1)-b&lt;sup]&gt;(1),a&lt;sup]&gt;(2)-b&lt;sup]&gt;(2) …..a&lt;sup]&gt;(m)-b&lt;sup]&gt;(m) ]</p><p>之前，非向量化：<br>$$<br>d_w=0 \<br>d_w+=x^{(1)}dz^{(1)}\<br>d_w+=x^{(2)}dz^{(2)}\<br>……\<br>d_w/=m<br>$$</p><p>$$<br>d_b=0 \<br>d_b+=dz^{(1)}\<br>d_b+=dz^{(2)}\<br>……\<br>d_b/=m<br>$$</p><p>向量化：<br>$$<br>\begin{aligned} d_b&amp;={1\over m}{\sum_{i=1}^nd_Z{(i)}} \&amp;={1\over m}np.sum(d_z) \end{aligned}<br>$$</p><p>$$<br>\begin{aligned} d_w&amp;={1\over m}X{d_z}^T\&amp;={1\over m}[x^w{d_z}^{(1)}+…..+x^w{d_z}^{(m)}]\end{aligned}<br>$$</p><p><strong>非向量化</strong> 对比 <strong>向量化</strong> </p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-13-1.png" alt="2-13-2"></p><p>向量化后:</p><p>$\begin{aligned}Z&amp;=w^TX+b\&amp;=np.dot(w.T,x)+b\end{aligned}$</p><p>$A=\sigma(Z)$</p><p>$d_Z=A*Y$</p><p>$d_w={1\over m}X{d_z}^T$</p><p>$d_b={1\over m}np.sum(d_z)$</p><p>$w:=w-ad_w$</p><p>$b:=b-ad_b$</p><p><strong>以上实现了Logistic回归的梯度下降一次迭代(without for loop)</strong> </p><p>如果要多次梯度下降，要在外面套一个for循环</p><hr><h2 id="2-15-Python中的广播"><a href="#2-15-Python中的广播" class="headerlink" title="2.15 Python中的广播"></a>2.15 Python中的广播</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([[<span class="number">56.0</span>,<span class="number">0.0</span>,<span class="number">4.4</span>,<span class="number">68.0</span>],</span><br><span class="line">           [<span class="number">1.2</span>,<span class="number">104.0</span>,<span class="number">52.0</span>,<span class="number">8.0</span>],</span><br><span class="line">           [<span class="number">1.8</span>,<span class="number">135.0</span>,<span class="number">99.0</span>,<span class="number">0.9</span>]])<span class="comment">#创建矩阵A</span></span><br><span class="line"></span><br><span class="line">cal = A.sum(axis=<span class="number">0</span>)<span class="comment">#竖直方向求和</span></span><br><span class="line"><span class="comment">#axis=1是水平方向求和</span></span><br><span class="line">print(cal)</span><br><span class="line"><span class="comment">#[  59.   239.   155.4   76.9]</span></span><br><span class="line"></span><br><span class="line">percentage = <span class="number">100</span>*A/cal.reshape(<span class="number">1</span>,<span class="number">4</span>)<span class="comment">#每个元素占该列的百分比</span></span><br><span class="line"><span class="comment">#把cal重新构建成1*4的矩阵</span></span><br><span class="line">print(percentage)</span><br><span class="line"><span class="comment">#[[ 94.91525424   0.           2.83140283  88.42652796]</span></span><br><span class="line"><span class="comment"># [  2.03389831  43.51464435  33.46203346  10.40312094]</span></span><br><span class="line"><span class="comment"># [  3.05084746  56.48535565  63.70656371   1.17035111]]</span></span><br><span class="line"></span><br><span class="line">percentage = <span class="number">100</span>*A/cal</span><br><span class="line">print(percentage)</span><br><span class="line"><span class="comment">#与上面相同，实际使用中如果不确定矩阵尺寸，要加上reshape确保是正确的形式</span></span><br></pre></td></tr></table></figure><p>举例：</p><ul><li>1 <em> 4 向量+常数，常数展开为1 </em> 4向量</li><li>m <em> n 向量+ 1</em>n 向量，竖直复制m次，把它变成m * n矩阵，再各元素相加</li><li>m <em> n 向量+ m</em>1 向量，水平复制n次，把它变成m * n矩阵，再各元素相加</li></ul><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-15-1.png" alt="2-15-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习2-15-2.png" alt="2-15-2"></p><p>就目前总结来看，<strong>广播把阶数低的矩阵扩展成对应阶数的阶数高的矩阵，然后对应元素进行运算</strong></p><hr><h2 id="2-16-关于Python-Numpy"><a href="#2-16-关于Python-Numpy" class="headerlink" title="2.16 关于Python/Numpy"></a>2.16 关于Python/Numpy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.rand(<span class="number">5</span>)<span class="comment">#a.shape=(5,)</span></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"><span class="comment">#[ 0.72813408 -1.05715439 -1.09577559 -1.35940775 -1.22865028]</span></span><br><span class="line"><span class="comment">#不要使用这种形式创建array，可能出现难发现的bug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用以下形式</span></span><br><span class="line">a = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)<span class="comment">#a.shape = (5,1)</span></span><br><span class="line">a = np.random.rand(<span class="number">1</span>,<span class="number">5</span>)<span class="comment">#a.shape = (1,5) </span></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"><span class="comment">#[[ 0.72813408 -1.05715439 -1.09577559 -1.35940775 -1.22865028]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果生成了不符合形式的数组，要使用reshape</span></span><br><span class="line">a=a.reshape(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#同时记得时常assert来确认数组形式</span></span><br><span class="line"><span class="keyword">assert</span>(a.shape == (<span class="number">5</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="2-17-Jupyter-Ipython介绍"><a href="#2-17-Jupyter-Ipython介绍" class="headerlink" title="2.17 Jupyter/Ipython介绍"></a>2.17 Jupyter/Ipython介绍</h2><p>写一点常用快捷键吧</p><p>命令模式：</p><p>F                ：查找替换</p><p>Enter            ：进入编辑模式</p><p>Ctrl+Enter        ：运行选中单元</p><p>Shift+Enter        ：运行单元，选择下一个</p><p>Alt+Enter        ：运行单元，在下面插入一个</p><p>Y                ：切换代码模式</p><p>M                ：切换Markdown模式</p><p>A                ：在上插入单元</p><p>B                ：在下插入单元</p><p>DD                ：删除单元</p><p>S                ：保存并创建还原点</p><p>Esc/Q            ：退出页面</p><p>H                ：帮助</p><p>编辑模式：</p><p>Tab                ：代码补全/缩进</p><p>Shift+Tab        ：反向缩进</p><p>Ctrl+Backspace    ：删除之前字符</p><p>Ctrl+Delete        ：删除之后字符</p><p>Esc/Ctrl+M        ：进入命令模式</p><p>Ctrl+Enter        ：运行选中单元</p><p>Shift+Enter        ：运行单元，选择下一个</p><p>Alt+Enter        ：运行单元，在下面插入一个</p><hr><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="3-1-神经网络概览"><a href="#3-1-神经网络概览" class="headerlink" title="3.1 神经网络概览"></a>3.1 神经网络概览</h2><hr><h2 id="3-2-3-3神经网络表示、输出"><a href="#3-2-3-3神经网络表示、输出" class="headerlink" title="3.2-3.3神经网络表示、输出"></a>3.2-3.3神经网络表示、输出</h2><p>如图神经网络是一个<strong>两层神经网络</strong></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-2-1.png" alt="3-2-1"></p><p><strong>第0层</strong> ：输入层</p><p>第1层：隐藏层</p><p>第2层：输出层</p><p>上标 $a^{[1]}$  表示第1层</p><p>下标  $a^{[1]}_1$  表示第1层第1个</p><p>所以第一层是一个 (4,1) 的矩阵或者一个维数为4的列向量<br>$$<br>a^{[1]}={\left[\begin{matrix} a^{[1]}_1\a^{[2]}_2\a^{[3]}_3\a^{[4]}_4\end{matrix}\right]}<br>$$<br>$a^{[i]}=\sigma{(w^{[i]T}x+b^{[i]})}$</p><p>所以上图中，$w^{[1]}$ 是一个(4,3)的矩阵，<em>3来自于 $x_1,x_2,x_3$ 三个输入特征</em> ，  $b^{[1]}$ 是一个 (4,1) 的矩阵</p><p>； $w^{[2]}$ 是一个(1,4)的矩阵，<em>4来自于隐藏层四个输入特征</em> ，  $b^{[2]}$ 是一个 (1,1) 的矩阵</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-3-1.png" alt="3-3-1"></p><p>$z^{[1]}_i=({w^{[1]}_i}^Tx+b^{[1]}_i)$</p><p>$a^{[1]}_i=\sigma(z^{[1]}_i)$</p><p>把第一个隐藏层$a^{[1]}_1;a^{[2]}_2;a^{[3]}_3;a^{[4]}_4$向量化</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-3-2.png" alt="3-3-2"></p><p>即通过右边的四个方程可以用四行代码在Python中计算单隐层神经网络的输出</p><hr><h2 id="3-4-3-5-多个例子中的向量化-amp-向量化实现的解释"><a href="#3-4-3-5-多个例子中的向量化-amp-向量化实现的解释" class="headerlink" title="3.4-3.5 多个例子中的向量化&amp;向量化实现的解释"></a>3.4-3.5 多个例子中的向量化&amp;向量化实现的解释</h2><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-4-1.png" alt="3-4-1"></p><p>${a^{[2]}}^{(i)}$ 2表示第2层，i表示第i个训练样本</p><p>无向量化：<br>$$<br>\ for \ i=1 \ to \  m \ {z^{[1]}}^{(i)}=({w^{[1]}}x^{[1]}+b^{[1]}) \ {a^{[1]}}^{(i)}=\sigma({z^{[1]}}^{(i)}) \ {z^{[2]}}^{(i)}=w^{[2]}{a^{[1]}}^{(i)}+b^{[2]} \ {a^{[2]}}^{(i)}=\sigma({z^{[2]}}^{(i)})<br>$$<br> for循环遍历m个样本</p><p>向量化：</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-4-2.png" alt="3-4-2"></p><p>把向量横向堆叠，组成矩阵用大写字母X，Z，A表示</p><p>矩阵中，横向表示不同的训练样本，纵向表示不同的输入特征，就是输入层的不同节点</p><p>然后以矩阵带入运算，即使用向量化提高效率</p><p>非向量化 VS 向量化</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-4-3.png" alt="3-4-3"></p><hr><h2 id="3-6-激活函数"><a href="#3-6-激活函数" class="headerlink" title="3.6 激活函数"></a>3.6 激活函数</h2><h4 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid()函数"></a>sigmoid()函数</h4><p>$a={1\over 1+e^{-z}}$</p><p>在之前的方程中<br>$$<br>{z^{[1]}}^{(i)}=({w^{[1]}}x^{[1]}+b^{[1]}) \ {a^{[1]}}^{(i)}=\sigma({z^{[1]}}^{(i)}) \ {z^{[2]}}^{(i)}=w^{[2]}{a^{[1]}}^{(i)}+b^{[2]} \ {a^{[2]}}^{(i)}=\sigma({z^{[2]}}^{(i)})<br>$$<br>$\sigma(z)$ 函数就属于激活函数，值介于0和1之间</p><p><strong>除非在二元分类的输出层，不然绝对不要用，或者永远不用</strong></p><h4 id="tanh-函数"><a href="#tanh-函数" class="headerlink" title="tanh()函数"></a>tanh()函数</h4><p>$a=tanh(z)={e^{z}-e^{-z}\over e^{z}+e^{-z}} $</p><p>有一个函数表现比sigmoid()更好，是tanh()函数（双曲正切函数），$a=tanh(z)={e^{z}-e^{-z}\over e^{z}+e^{-z}} $</p><p>在图形上是 $\sigma()$ 函数在y轴上向下平移后的版本</p><p>tanh() 函数值介于-1和1之间，平均值接近0，让下一层学习更方便</p><p><strong>不同层的激活函数可以不一样 用 $g^{[i]}$ 上标来表示不同层的激活函数</strong> </p><h4 id="修正线性单元-ReLU"><a href="#修正线性单元-ReLU" class="headerlink" title="修正线性单元(ReLU)"></a>修正线性单元(ReLU)</h4><p>a=max(0,z)</p><p>z&gt;0，导数(斜率)为1；z&lt;0，导数为0；z=0，无定义</p><h4 id="带泄露的ReLU-Leaky-ReLU"><a href="#带泄露的ReLU-Leaky-ReLU" class="headerlink" title="带泄露的ReLU(Leaky ReLU)"></a>带泄露的ReLU(Leaky ReLU)</h4><p>即把ReLU的负数部分变成一个导数非常小但不为0的曲线</p><p>正数部分不变</p><p>激活函数选择：</p><ul><li>输出值为0或1(二元分类)：$\sigma()$ 作为输出层的激活函数；其他所有单元用ReLU</li><li>不确定用什么：用ReLU</li><li>不要特意局限于用什么激活函数</li></ul><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-6-1.png" alt="3-6-1"></p><hr><h2 id="3-7-为什么需要非线性激活函数"><a href="#3-7-为什么需要非线性激活函数" class="headerlink" title="3.7 为什么需要非线性激活函数"></a>3.7 为什么需要非线性激活函数</h2><p>如果使用线性激活函数在隐藏层中，模型复杂度和没有任何隐藏层的一样</p><p>线性隐层无用</p><p>因为两个线性函数组合本身是线性函数</p><p><strong>只有在极个别特殊情况下才需要使用线性激活函数而且一般在输出层</strong> </p><hr><h2 id="3-8-激活函数的导数"><a href="#3-8-激活函数的导数" class="headerlink" title="3.8 激活函数的导数"></a>3.8 激活函数的导数</h2><h4 id="sigma-sigmoid函数"><a href="#sigma-sigmoid函数" class="headerlink" title="$\sigma()$ sigmoid函数"></a>$\sigma()$ sigmoid函数</h4><p>$g’(z)={dg(z)\over dz}={1\over 1+e^{-z}}(1-{1\over 1+e^{-z}})=g(z)(1-g(z))=a(1-a)$</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-8-1.png" alt="3-8-1"></p><h4 id="tanh-函数-1"><a href="#tanh-函数-1" class="headerlink" title="tanh()函数"></a>tanh()函数</h4><p>$g’(z)={dg(z)\over dz}=d({e^{z}-e^{-z}\over e^{z}+e^{-z}})/dz=(1-({e^{z}-e^{-z}\over e^{z}+e^{-z}})^2)=1-tanh(z)^2=1-a^2$</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-8-2.png" alt="3-8-2"></p><h4 id="ReLU-and-Leaky-ReLU"><a href="#ReLU-and-Leaky-ReLU" class="headerlink" title="ReLU and Leaky ReLU"></a>ReLU and Leaky ReLU</h4><p>ReLU: $g(z)=max(0,z)$ </p><p>$g’(z)=\begin{cases} 0&amp;\text{z&lt;0}\ 1&amp;\text{z&gt;0} \ \text{无定义}&amp; \text{z=0} \end{cases} \ $</p><p>Leaky ReLU: $g(z)=max(0.01z,z) $</p><p>$g’(z)=\begin{cases} 0.01&amp;\text{z&lt;0}\ 1&amp;\text{z&gt;0} \ \text{无定义}&amp; \text{z=0} \end{cases} \ $</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-8-3.png" alt="3-8-3"></p><hr><h2 id="3-9-神经网络的梯度下降法"><a href="#3-9-神经网络的梯度下降法" class="headerlink" title="3.9 神经网络的梯度下降法"></a>3.9 神经网络的梯度下降法</h2><h4 id="神经网络梯度下降"><a href="#神经网络梯度下降" class="headerlink" title="神经网络梯度下降"></a>神经网络梯度下降</h4><p><strong>用到的参数</strong> ：$w^{[1]}(n^{[1]},n^{[0]})\ ,\ b^{[1]}\ (n^{[1]},1),\ w^{[2]}\ (n^{[2]},n^{[1]})\ ,\ b^{[2]}\ (n^{[2]},1)$</p><p><strong>损失函数</strong> ：$J(w^{[1]},b^{[1]},w^{[2]},b^{[2]})={1\over m}{\sum^m_{i=1}}l$(y^,y)</p><p>​        $l$表示神经网络预测出y^时的损失函数；y^这里其实是$a^{[2]}$，然后真值标签为y</p><p><strong>梯度下降</strong>： 先随机初始化函数而不需要全部初始化为0</p><p>​        计算预测：(y^$^{(i)}$ i=1,2……m)</p><p>​        $dw^{[1]}={dJ\over dw^{[1]}},db^{[1]}={dJ\over db^{[1]}},dw^{[2]}={dJ\over dw^{[2]}},db^{[2]}={dJ\over db^{[2]}}$</p><p>​        $w^{[1]}:=w^{[1]}-\alpha dw^{[1]}$ ,$\alpha$ 是学习率</p><p>​        $b^{[1]}:=b^{[1]}-\alpha db^{[1]}$</p><p>​        $w^{[2]}:=w^{[2]}-\alpha dw^{[2]}$</p><p>​        $b^{[2]}:=b^{[1]}-\alpha db^{[1]}$</p><p>以上是梯度下降的一次迭代循环</p><p>需要重复上述步骤很多次直到参数看上去在收敛</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-9-1.png" alt="3-9-1"></p><h4 id="计算导数的公式"><a href="#计算导数的公式" class="headerlink" title="计算导数的公式"></a>计算导数的公式</h4><p><strong>正向传播</strong>：四个方程<br>$$<br>\begin{aligned}<br>z^{[1]}&amp;=w^{[1]}x+b^{[1]} \<br>A^{[1]}&amp;=g^{[1]}(z^{[1]}) \<br>z^{[2]}&amp;=w^{[2]}x+b^{[2]} \<br>A^{[2]}&amp;=g^{[2]}(z^{[2]}) \<br>\end{aligned}<br>$$<br>g(z)是激活函数</p><p><strong>反向传播</strong>： 六个方程<br>$$<br>\begin{aligned}<br>dz^{[2]}&amp;=A^{[2]}-Y \qquad Y=[y^{[1]},y^{[2]}………..y^{[m]}]\<br>dw^{[2]}&amp;={1\over m}dz^{[2]}A^{[1]^T} \<br>db^{[2]}&amp;={1\over m}np.sum(dz^{[2]},axis=1,keepdims=True)  \<br>&amp;np.sum()用来对矩阵的一个维度求和 \<br>&amp;axis=1表示水平相加求和\<br>&amp;keepdims防止Python直接输出秩为1的矩阵。确保输出是矩阵，也可以通过reshape实现\<br>&amp;对于db^{[2]}这个向量输出的维度是(n,1),实际上是(n^{[2]},1) \<br>dz^{[1]}&amp;=w^{[2]^T}dz^{[2]}*g^{[1]’}(z^{[1]}) \<br>&amp;g^{[1]’}是隐藏层的激活函数的导数 \<br>&amp;w^{[2]^T}dz^{[2]}和g^{[1]’}(z^{[1]})是两个(n^{[1]},{m})的矩阵 \<br>&amp;dz^{[1]}是两个矩阵的逐元素乘积 \<br>dw^{[1]}&amp;={1\over m}dz^{[1]}X^T \<br>db^{[1]}&amp;={1\over m}np.sum(dz^{[1]},x=1,keepdims=True) \qquad db^{[1]}是(n^{[1]},1)向量 \<br>\end{aligned}<br>$$<br><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-9-2.png" alt="3-9-2"></p><hr><h2 id="3-10-直观理解反向传播"><a href="#3-10-直观理解反向传播" class="headerlink" title="3.10 直观理解反向传播"></a>3.10 直观理解反向传播</h2><p>$$<br>\begin{aligned}<br>dz^{[2]}&amp;=a^{[2]}-y \<br>dW^{[2]}&amp;=dz^{[2]}a^{[1]^T} \<br>db^{[2]}&amp;=dz^{[2]} \<br>dz^{[1]}&amp;=W^{[2]^T}dz^{[2]}*g^{[1]’}(z^{[1]}) \<br>dW^{[1]}&amp;=dz^{[1]}x^T \<br>db^{[1]}&amp;=dz^{[1]} \<br>\end{aligned}<br>$$</p><p>向量化实现<br>$$<br>\begin{aligned}<br>dz^{[2]}&amp;=A^{[2]}-Y \<br>dW^{[2]}&amp;={1\over m}dZ^{[2]}A^{[1]^T} \<br>db^{[2]}&amp;={1\over m}np.sum(dZ^{[2]},axis=1,keepdims=True) \<br>dZ^{[1]}&amp;=W^{[2]^Y}dZ^{[2]}*g{[1]’}(Z^{[1]}) \<br>dW^{[1]}&amp;={1\over m}dZ^{[1]}X^T \<br>db^{[1]}&amp;={1\over m}np.sum(dZ^{[1]},axis=1,keepdims=True) \<br>\end{aligned}<br>$$<br><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-10-1.png" alt="3-10-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-10-2.png" alt="3-10-2"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-10-3.png" alt="3-10-3"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-10-4.png" alt="3-10-4"></p><hr><h2 id="3-11-随机初始化"><a href="#3-11-随机初始化" class="headerlink" title="3.11 随机初始化"></a>3.11 随机初始化</h2><p><strong>如果将各参数数组全部初始化为0再使用梯度下降算法，会完全无效</strong> </p><p>如果W数组中全部被初始化为0，那么隐藏单元就是对称的，所有隐藏单元都在计算同样的函数，无效</p><p>b可以初始化为0，没有对称性问题</p><p><strong>正确做法：</strong> </p><p>$$<br>\begin{aligned}<br>W^{[1]} &amp;=np.random.rand((2,2))<em>0.01 \<br>b^{[1]}&amp;=np.zero((2,1)) \<br>W^{[2]}&amp;=np.random.rand((1,2))</em>0.01. \<br>b^{[2]}&amp;=np.zero((1,1))\ /\ b^{[2]}=0 \<br>\end{aligned}<br>$$</p><p>通常会把W设成一个很小的数来使学习加速（使落在tanh或sigmoid函数落在图像中梯度斜率较大的部分）</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-11-1.png" alt="3-11-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习3-11-2.png" alt="3-11-2"></p><hr><h3 id="Week3课后习题总结"><a href="#Week3课后习题总结" class="headerlink" title="Week3课后习题总结"></a>Week3课后习题总结</h3><ul><li>方括号上标表示层，圆括号上标表示样本，数字下标表示某个神经元</li><li>在训练集X中，每一列代表一个样本</li><li>对Logistic回归，可以将w初始化为0，因为它的输出层只有一个节点</li><li>keepdims=True用来保持矩阵的二维特性，axis=0纵向求和，axis=1横向求和</li></ul><h3 id="编程作业总结"><a href="#编程作业总结" class="headerlink" title="编程作业总结"></a>编程作业总结</h3><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">x = np.array([1, 2, 3])</span><br><span class="line">print(np.exp(x)) # result is (exp(1), exp(2), exp(3))</span><br><span class="line">#[  2.71828183   7.3890561   20.08553692]</span><br><span class="line">print(math.exp(x)) #TypeError: only length-1 arrays can be converted to Python scalars</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(np.exp(x)) <span class="comment"># result is (exp(1), exp(2), exp(3))</span></span><br><span class="line"><span class="comment">#[  2.71828183   7.3890561   20.08553692]</span></span><br><span class="line"><span class="comment"># print(math.exp(x)) #TypeError: must be real number, not list</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example of vector operation</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (x + <span class="number">3</span>) <span class="comment">#[4 5 6]</span></span><br><span class="line">print(<span class="number">1</span>/x) <span class="comment">#[ 1.          0.5         0.33333333]</span></span><br></pre></td></tr></table></figure><ul><li>数组中的sigmoid</li></ul><p>$$<br>\text{For } x \in \mathbb{R}^n \text{,     } sigmoid(x) = sigmoid\begin{pmatrix}<br>    x_1  \<br>    x_2  \<br>    …  \<br>    x_n  \<br>\end{pmatrix} = \begin{pmatrix}<br>    \frac{1}{1+e^{-x_1}}  \<br>    \frac{1}{1+e^{-x_2}}  \<br>    …  \<br>    \frac{1}{1+e^{-x_n}}  \<br>\end{pmatrix}\tag{1}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># this means you can access numpy functions by writing np.function() instead of numpy.function()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    s = (<span class="number">1</span>/(<span class="number">1</span>+np.exp(-x)))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">sigmoid(x)<span class="comment">#array([ 0.73105858,  0.88079708,  0.95257413])</span></span><br></pre></td></tr></table></figure><ul><li>||x||:求范数</li></ul><p>$$<br>\begin{aligned}<br>x&amp;=<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 3<br>\end{bmatrix} \ </p><p>\||x||&amp;=\sqrt{<br>1^2+2^2+3^2}=\sqrt{13} \</p><p>\x_{normalized}&amp;={x\over{||x||}} \<br>&amp;=<br>\begin{bmatrix}<br>1\over{\sqrt{13}} &amp; 2\over{\sqrt{13}} &amp; 3\over{\sqrt{13}}<br>\end{bmatrix} \<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">||x||=np.linalg.norm(x,axis=<span class="number">1</span>,keepdims=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: normalizeRows</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalizeRows</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement a function that normalizes each row of the matrix x (to have unit length).   </span></span><br><span class="line"><span class="string">    Argument:</span></span><br><span class="line"><span class="string">    x -- A numpy matrix of shape (n, m)   </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    x -- The normalized (by row) numpy matrix. You are allowed to modify x.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 2 lines of code)</span></span><br><span class="line">    <span class="comment"># Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)    </span></span><br><span class="line">    </span><br><span class="line">    x_norm =np.linalg.norm(x,ord=<span class="number">2</span>,axis=<span class="number">1</span>,keepdims=<span class="keyword">True</span>)</span><br><span class="line">    x = x/x_norm   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>]])</span><br><span class="line">print(<span class="string">"normalizeRows(x) = "</span> + str(normalizeRows(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#normalizeRows(x) = [[ 0.          0.6         0.8       ]</span></span><br><span class="line"><span class="comment"># [ 0.26726124  0.80178373  0.53452248]]</span></span><br></pre></td></tr></table></figure><ul><li>传播和softmax函数</li></ul><p>$$<br>\text{for } x \in \mathbb{R}^{1\times n} \text{,     } softmax(x) = softmax(\begin{bmatrix}<br>    x_1  &amp;&amp;<br>    x_2 &amp;&amp;<br>    …  &amp;&amp;<br>    x_n<br>\end{bmatrix}) = \begin{bmatrix}<br>     \frac{e^{x_1}}{\sum_{j}e^{x_j}}  &amp;&amp;<br>    \frac{e^{x_2}}{\sum_{j}e^{x_j}}  &amp;&amp;<br>    …  &amp;&amp;<br>    \frac{e^{x_n}}{\sum_{j}e^{x_j}}<br>\end{bmatrix}<br>$$</p><p>$\text{for a matrix } x \in \mathbb{R}^{m \times n} \text{,  $x_{ij}$ maps to the element in the $i^{th}$ row and $j^{th}$ column of $x$, thus we have: }$<br>$$<br>softmax(x) = softmax\begin{bmatrix}<br>    x_{11} &amp; x_{12} &amp; x_{13} &amp; \dots  &amp; x_{1n} \<br>    x_{21} &amp; x_{22} &amp; x_{23} &amp; \dots  &amp; x_{2n} \<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    x_{m1} &amp; x_{m2} &amp; x_{m3} &amp; \dots  &amp; x_{mn}<br>\end{bmatrix} = \begin{bmatrix}<br>    \frac{e^{x_{11}}}{\sum_{j}e^{x_{1j}}} &amp; \frac{e^{x_{12}}}{\sum_{j}e^{x_{1j}}} &amp; \frac{e^{x_{13}}}{\sum_{j}e^{x_{1j}}} &amp; \dots  &amp; \frac{e^{x_{1n}}}{\sum_{j}e^{x_{1j}}} \<br>    \frac{e^{x_{21}}}{\sum_{j}e^{x_{2j}}} &amp; \frac{e^{x_{22}}}{\sum_{j}e^{x_{2j}}} &amp; \frac{e^{x_{23}}}{\sum_{j}e^{x_{2j}}} &amp; \dots  &amp; \frac{e^{x_{2n}}}{\sum_{j}e^{x_{2j}}} \<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    \frac{e^{x_{m1}}}{\sum_{j}e^{x_{mj}}} &amp; \frac{e^{x_{m2}}}{\sum_{j}e^{x_{mj}}} &amp; \frac{e^{x_{m3}}}{\sum_{j}e^{x_{mj}}} &amp; \dots  &amp; \frac{e^{x_{mn}}}{\sum_{j}e^{x_{mj}}}<br>\end{bmatrix} = \begin{pmatrix}<br>    softmax\text{(first row of x)}  \<br>    softmax\text{(second row of x)} \<br>    …  \<br>    softmax\text{(last row of x)} \<br>\end{pmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: softmax</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Calculates the softmax for each row of the input x.</span></span><br><span class="line"><span class="string">    Your code should work for a row vector and also for matrices of shape (n, m).</span></span><br><span class="line"><span class="string">    Argument:</span></span><br><span class="line"><span class="string">    x -- A numpy matrix of shape (n,m)</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    s -- A numpy matrix equal to the softmax of x, of shape (n,m)</span></span><br><span class="line"><span class="string">    """</span>    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 3 lines of code)</span></span><br><span class="line">    <span class="comment"># Apply exp() element-wise to x. Use np.exp(...).</span></span><br><span class="line">    </span><br><span class="line">    x_exp = np.exp(x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).</span></span><br><span class="line">    </span><br><span class="line">    x_sum = np.sum(x_exp,axis=<span class="number">1</span>,keepdims=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.</span></span><br><span class="line">    </span><br><span class="line">    s = x_exp/x_sum</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>]])</span><br><span class="line">print(<span class="string">"softmax(x) = "</span> + str(softmax(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#softmax(x) = [[  9.80897665e-01   8.94462891e-04   1.79657674e-02   1.21052389e-04</span></span><br><span class="line"><span class="comment">#    1.21052389e-04]</span></span><br><span class="line"><span class="comment"># [  8.78679856e-01   1.18916387e-01   8.01252314e-04   8.01252314e-04</span></span><br><span class="line"><span class="comment">#    8.01252314e-04]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#x_sum的shape是(2,1)</span></span><br><span class="line"><span class="comment">#x_exp和s的shape是(2,5)</span></span><br><span class="line"><span class="comment">#x_exp/x_sum因传播而生效</span></span><br></pre></td></tr></table></figure><p>向量化与非向量化对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x1 = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">x2 = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### CLASSIC DOT PRODUCT OF VECTORS IMPLEMENTATION ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">dot = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x1)):</span><br><span class="line">    dot+= x1[i]*x2[i]</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dot = "</span> + str(dot) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### CLASSIC OUTER PRODUCT IMPLEMENTATION ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">outer = np.zeros((len(x1),len(x2))) <span class="comment"># we create a len(x1)*len(x2) matrix with only zeros</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(x2)):</span><br><span class="line">        outer[i,j] = x1[i]*x2[j]</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"outer = "</span> + str(outer) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### CLASSIC ELEMENTWISE IMPLEMENTATION ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">mul = np.zeros(len(x1))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x1)):</span><br><span class="line">    mul[i] = x1[i]*x2[i]</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"elementwise multiplication = "</span> + str(mul) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### CLASSIC GENERAL DOT PRODUCT IMPLEMENTATION ###</span></span><br><span class="line">W = np.random.rand(<span class="number">3</span>,len(x1)) <span class="comment"># Random 3*len(x1) numpy array</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">gdot = np.zeros(W.shape[<span class="number">0</span>]) <span class="comment">#gdot=[0,0,0]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(W.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(x1)):</span><br><span class="line">        gdot[i] += W[i,j]*x1[j]</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"gdot = "</span> + str(gdot) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dot = 278</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># outer = [[ 81.  18.  18.  81.   0.  81.  18.  45.   0.   0.  81.  18.  45.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 18.   4.   4.  18.   0.  18.   4.  10.   0.   0.  18.   4.  10.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 45.  10.  10.  45.   0.  45.  10.  25.   0.   0.  45.  10.  25.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 63.  14.  14.  63.   0.  63.  14.  35.   0.   0.  63.  14.  35.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 45.  10.  10.  45.   0.  45.  10.  25.   0.   0.  45.  10.  25.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 81.  18.  18.  81.   0.  81.  18.  45.   0.   0.  81.  18.  45.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 18.   4.   4.  18.   0.  18.   4.  10.   0.   0.  18.   4.  10.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [ 45.  10.  10.  45.   0.  45.  10.  25.   0.   0.  45.  10.  25.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]</span></span><br><span class="line"><span class="comment">#  [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.</span></span><br><span class="line"><span class="comment">#     0.]]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># elementwise multiplication = [ 81.   4.  10.   0.   0.  63.  10.   0.   0.   0.  81.   4.  25.   0.   0.]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># gdot=[ 0.  0.  0.]</span></span><br><span class="line"><span class="comment"># gdot = [ 21.97380652  26.38361179  23.30444777]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">x1 = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">x2 = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### VECTORIZED DOT PRODUCT OF VECTORS ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">dot = np.dot(x1,x2)</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dot = "</span> + str(dot) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### VECTORIZED OUTER PRODUCT ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">outer = np.outer(x1,x2)</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"outer = "</span> + str(outer) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"><span class="comment">#outer是第一个矩阵第一个元素和第二个矩阵每一个元素相乘作第一行，第一个矩阵第二个元素和第二个矩阵每一个元素相乘作第二行，以此类推</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### VECTORIZED ELEMENTWISE MULTIPLICATION ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">mul = np.multiply(x1,x2)</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"elementwise multiplication = "</span> + str(mul) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### VECTORIZED GENERAL DOT PRODUCT ###</span></span><br><span class="line">tic = time.process_time()</span><br><span class="line">dot = np.dot(W,x1)</span><br><span class="line">toc = time.process_time()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"gdot = "</span> + str(dot) + <span class="string">"\n ----- Computation time = "</span> + str(<span class="number">1000</span>*(toc - tic)) + <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dot = 278</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># outer = [[81 18 18 81  0 81 18 45  0  0 81 18 45  0  0]</span></span><br><span class="line"><span class="comment">#  [18  4  4 18  0 18  4 10  0  0 18  4 10  0  0]</span></span><br><span class="line"><span class="comment">#  [45 10 10 45  0 45 10 25  0  0 45 10 25  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [63 14 14 63  0 63 14 35  0  0 63 14 35  0  0]</span></span><br><span class="line"><span class="comment">#  [45 10 10 45  0 45 10 25  0  0 45 10 25  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [81 18 18 81  0 81 18 45  0  0 81 18 45  0  0]</span></span><br><span class="line"><span class="comment">#  [18  4  4 18  0 18  4 10  0  0 18  4 10  0  0]</span></span><br><span class="line"><span class="comment">#  [45 10 10 45  0 45 10 25  0  0 45 10 25  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]</span></span><br><span class="line"><span class="comment">#  [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># elementwise multiplication = [81  4 10  0  0 63 10  0  0  0 81  4 25  0  0]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 0.0ms</span></span><br><span class="line"><span class="comment"># gdot = [ 21.97380652  26.38361179  23.30444777]</span></span><br><span class="line"><span class="comment">#  ----- Computation time = 15.625ms</span></span><br></pre></td></tr></table></figure><ul><li>实现L1和L2损失函数</li></ul><p>$$\begin{align<em>} &amp; L_1(\hat{y}, y) = \sum_{i=0}^m|y^{(i)} - \hat{y}^{(i)}| \end{align</em>}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: L1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L1</span><span class="params">(yhat, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    yhat -- vector of size m (predicted labels)</span></span><br><span class="line"><span class="string">    y -- vector of size m (true labels)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    loss -- the value of the L1 loss function defined above</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 1 line of code)</span></span><br><span class="line">    loss = np.sum(abs(y-yhat),axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">yhat = np.array([<span class="number">.9</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">.4</span>, <span class="number">.9</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">"L1 = "</span> + str(L1(yhat,y)))</span><br><span class="line"><span class="comment">#L1 = 1.1</span></span><br></pre></td></tr></table></figure><p> if $x = [x_1, x_2, …, x_n]$, then <code>np.dot(x,x)</code> = $\sum_{j=0}^n x_j^{2}$. </p><p>$$\begin{align<em>} &amp; L_2(\hat{y},y) = \sum_{i=0}^m(y^{(i)} - \hat{y}^{(i)})^2 \end{align</em>}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: L2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L2</span><span class="params">(yhat, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    yhat -- vector of size m (predicted labels)</span></span><br><span class="line"><span class="string">    y -- vector of size m (true labels)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    loss -- the value of the L2 loss function defined above</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 1 line of code)</span></span><br><span class="line">    loss = np.dot((y-yhat),(y-yhat))</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">yhat = np.array([<span class="number">.9</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">.4</span>, <span class="number">.9</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">"L2 = "</span> + str(L2(yhat,y)))</span><br><span class="line"><span class="comment">#L2 = 0.43</span></span><br></pre></td></tr></table></figure><hr><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="4-1-深层神经网络"><a href="#4-1-深层神经网络" class="headerlink" title="4.1 深层神经网络"></a>4.1 深层神经网络</h2><p>计算神经网络层数的时候，<strong>只计算隐层+输出层的，输入层不计入</strong> </p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-1-1.png" alt="4-1-1"></p><p>下面的，是一个四层神经网络，有三个隐层，隐层的单元数目分别是5、5、3，有一个输出层，中有一个输出单元</p><p><strong>符号约定</strong>：</p><ul><li>X：输入特征，也是l层的激活函数$X=a^{[0]}$</li></ul><ul><li>L ：神经网络的层数，这里L=4</li><li>$n^{[l]}$ 表示节点的数量，或者小l层上的单元数量，比如这里$n^{[1]}=5,n^{[2]}=5,n^{[3]}=3,n^{[4]}=n^{[L]}=1,n^{[0]}=n_x=3$</li><li>$a^{[l]}$表示l层中的激活函数，$a^{[;]}=g(z^{[l]})$</li><li>$W^{[l]}$表示在$a^{[l]}$中计算$z^{[l]}$值的的权重，$b^{[l]}$也一样</li><li>y^= $a^{[L]}$ ，表示最后一层的激活函数，在这里也是预测输出</li></ul><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-1-2.png" alt="4-1-2"></p><hr><h2 id="4-2-深层网络中的前向传播"><a href="#4-2-深层网络中的前向传播" class="headerlink" title="4.2 深层网络中的前向传播"></a>4.2 深层网络中的前向传播</h2><p><strong>正向传播公式总结</strong></p><p> <img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-2-1.png" alt="4-2-1"></p><hr><h2 id="4-3-核对矩阵的维数"><a href="#4-3-核对矩阵的维数" class="headerlink" title="4.3 核对矩阵的维数"></a>4.3 核对矩阵的维数</h2><p>$dw^{[l]}=w^{[l]}:(n^{[l]},n^{[l-1]})$</p><p>$db^{[l]}=b^{[l]}:(n^{[l]},1)$</p><p><strong>For example：</strong></p><p>$z^{[1]}=w^{[1]}·x+b^{[1]}$    其中$z^{[1]}:(n^{[1]},1); w^{[1]}:(n^{[1]},n^{[0]});x:(n^{[0]},1);b^{[1]}:(n^{[1]},1)$</p><p>向量化后：</p><p>$Z^{[1]}=w^{[1]}·x+b^{[1]}$    其中$Z^{[1]}:(n^{[1]},m); w^{[1]}:(n^{[1]},n^{[0]});x:(n^{[0]},m);b^{[1]}:(n^{[1]},m)$</p><p><strong>m是训练集大小,$b^{[1]}$依然是$(n^{[1]},1)$，经过python的<code>broadcasting</code>复制成$(n^{[1]},m)$并逐个相加</strong> </p><p>$z^{[l]},a^{[l]}:(n^{[l]},1)$</p><p>$Z^{[l]},A^{[l]}:(n^{[l]},m)$</p><p>当$l=0$时，$A^{[0]}=X=(n^{[0]},m)$</p><p>$dZ^{[l]},dA^{[l]}:(n^{[l]},m)$</p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-3-1.png" alt="4-3-1"></p><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-3-2.png" alt="4-3-2"></p><hr><h2 id="4-4-为什么使用深层表示"><a href="#4-4-为什么使用深层表示" class="headerlink" title="4.4 为什么使用深层表示"></a>4.4 为什么使用深层表示</h2><p>从前到后,每一层依次检测逐渐复杂的东西    </p><ol><li>比如第一层检测不同角度的边缘</li><li>第二层得出不同角度的眼睛等</li><li>第三层检测不同的组合的不同面部</li></ol><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-4-1.png" alt="4-4-1"></p><ul><li><p>比如在进行多个参数异或运算的时候</p><ul><li>使用深度学习网络,第一层每两个异或一次</li><li>第二层对上一层每两个结果之间再异或</li><li>第三层同样</li><li>最后得出y</li></ul></li><li><p>而使用单隐层</p><ul><li>需要$2^{n-1}$个单元，复杂度为O($2^{n}$)</li></ul></li></ul><p><img src="/2018/11/15/深度学习笔记/吴恩达深度学习4-4-2.png" alt="4-4-2"></p><hr><h2 id="4-5-搭建深层神经网络块"><a href="#4-5-搭建深层神经网络块" class="headerlink" title="4.5 搭建深层神经网络块"></a>4.5 搭建深层神经网络块</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;神经网络和深度学习&quot;&gt;&lt;a href=&quot;#神经网络和深度学习&quot; class=&quot;headerlink&quot; title=&quot;神经网络和深度学习&quot;&gt;&lt;/a&gt;神经网络和深度学习&lt;/h1&gt;&lt;p&gt;学习自&lt;a href=&quot;http://study.163.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网易云课堂&lt;/a&gt;,参考&lt;a href=&quot;https://zhuanlan.zhihu.com/aiclass&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;吴恩达深度学习课程辅导&lt;/a&gt;、&lt;a href=&quot;http://binweber.top/tags/ML/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&quot;http://study.163.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网易云课堂&lt;/a&gt;和&lt;a href=&quot;https://www.deeplearning.ai/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;deeplearning.ai&lt;/a&gt;，非常感谢Andrew Ng老师，图片来自课件文档&lt;/p&gt;
    
    </summary>
    
    
      <category term="programme" scheme="http://zzjoeyyy.com/tags/programme/"/>
    
  </entry>
  
  <entry>
    <title>intro-python-raspi</title>
    <link href="http://zzjoeyyy.com/2018/11/15/intro-python-raspi/"/>
    <id>http://zzjoeyyy.com/2018/11/15/intro-python-raspi/</id>
    <published>2018-11-15T06:33:40.000Z</published>
    <updated>2018-11-15T10:53:54.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派Python入门"><a href="#树莓派Python入门" class="headerlink" title="树莓派Python入门"></a>树莓派Python入门</h1><blockquote><p>目标：按下按键，转动对应马达</p></blockquote><a id="more"></a><h3 id="手柄"><a href="#手柄" class="headerlink" title="手柄"></a>手柄</h3><blockquote><p> XBOX手柄，双摇杆，双扳机，九按键</p><p> USB连接树莓派</p></blockquote><p><img src="/2018/11/15/intro-python-raspi/IMG_7478.jpg" alt="IMG_7478"><br><img src="/2018/11/15/intro-python-raspi/IMG_7476.jpg" alt="IMG_7476"></p><hr><h3 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h3><blockquote><p> 型号：3B/3B+</p><p> 系统：Raspbian Stretch</p><p> 要先在 raspi-config 中 enable serial </p></blockquote><hr><h3 id="驱动板"><a href="#驱动板" class="headerlink" title="驱动板"></a>驱动板</h3><blockquote><p> .Pi    DC+Stepper Motor HAT v2.0</p></blockquote><p>驱动板接入树莓派BOARD编号1-6 号串口，扣上去</p><p><img src="https://img.alicdn.com/imgextra/i1/34518727/TB2sZUgrA9WBuNjSspeXXaz5VXa_!!34518727.jpg" alt="img"></p><p><img src="https://img.alicdn.com/imgextra/i1/34518727/TB2TCQ3pr3nBKNjSZFMXXaUSFXa_!!34518727.jpg" alt="img"></p><p>3个TT马达分别使用杜邦线接驱动板M1、M2、M3；GND不接<img src="/2018/11/15/intro-python-raspi/IMG_7482.jpg" alt="IMG_7482"></p><hr><h3 id="Motor"><a href="#Motor" class="headerlink" title="Motor"></a>Motor</h3><blockquote><p>TT马达，3-6V直流减速电机</p></blockquote><p>适用于驱动车，ROV需要重新选型</p><hr><h3 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h3><blockquote><p> 12v DC电源</p></blockquote><p>驱动板通过串口分配 3.3v 驱动树莓派，树莓派不再接电源</p><p>ROV上推荐使用DC电池, 电流随电机功率计算后配入</p><p><strong>树莓派不能再接电源， 接会烧毁</strong></p><hr><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/env/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Adafruit_MotorHAT <span class="keyword">import</span> Adafruit_MotorHAT, Adafruit_DCMotor</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the joysticks</span></span><br><span class="line">pygame.joystick.init()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line"><span class="comment"># pygame.init()</span></span><br><span class="line">joystick = pygame.joystick.Joystick(<span class="number">0</span>)</span><br><span class="line">print(<span class="string">"init"</span>)</span><br><span class="line">joystick.init()</span><br><span class="line"></span><br><span class="line">mh = Adafruit_MotorHAT(addr=<span class="number">0x60</span>)</span><br><span class="line">myMotor1 = mh.getMotor(<span class="number">1</span>)</span><br><span class="line">myMotor2 = mh.getMotor(<span class="number">2</span>)</span><br><span class="line">myMotor3 = mh.getMotor(<span class="number">3</span>)</span><br><span class="line">myMotor4 = mh.getMotor(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turnOffAllMotors</span><span class="params">()</span>:</span></span><br><span class="line">    mh.getMotor(<span class="number">1</span>).run(Adafruit_MotorHAT.RELEASE)</span><br><span class="line">    mh.getMotor(<span class="number">2</span>).run(Adafruit_MotorHAT.RELEASE)</span><br><span class="line">    mh.getMotor(<span class="number">3</span>).run(Adafruit_MotorHAT.RELEASE)</span><br><span class="line">    mh.getMotor(<span class="number">4</span>).run(Adafruit_MotorHAT.RELEASE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_forward</span><span class="params">(myMotor, speed)</span>:</span></span><br><span class="line">    myMotor.run(Adafruit_MotorHAT.FORWARD)</span><br><span class="line">    myMotor.setSpeed(speed)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_backward</span><span class="params">(myMotor, speed)</span>:</span></span><br><span class="line">    myMotor.run(Adafruit_MotorHAT.BACKWARD)</span><br><span class="line">    myMotor.setSpeed(speed)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_release</span><span class="params">(myMotor)</span>:</span></span><br><span class="line">    myMotor.run(Adafruit_MotorHAT.RELEASE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pygame.init()</span><br><span class="line">    pygame.joystick.init()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())], pygame.joystick.get_count()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.joystick.get_count() &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Joystick has been initialized."</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"No Joystick found."</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    stick = pygame.joystick.Joystick(<span class="number">0</span>)</span><br><span class="line">    stick.init()</span><br><span class="line">    axisNum = stick.get_numaxes()</span><br><span class="line">    buttonNum = stick.get_numbuttons()</span><br><span class="line">    <span class="comment"># print buttonNum</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> pygame.joystick.get_count() &gt; <span class="number">0</span>:</span><br><span class="line">            pygame.event.get()</span><br><span class="line">        </span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            Axis 0 左摇杆，负为左倾，正为右倾</span></span><br><span class="line"><span class="string">            Axis 1 左摇杆，负为上倾，正为下倾</span></span><br><span class="line"><span class="string">            Axis 2 负为右加速，正为左加速</span></span><br><span class="line"><span class="string">            Axis 3 右摇杆，负为上倾，正为下倾</span></span><br><span class="line"><span class="string">            Axis 4 右摇杆，负为左倾，正为右倾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            Button 0 右侧四按键，A</span></span><br><span class="line"><span class="string">            Button 1 右侧四按键，B</span></span><br><span class="line"><span class="string">            Button 2 右侧四按键，X</span></span><br><span class="line"><span class="string">            Button 3 右侧四按键，Y</span></span><br><span class="line"><span class="string">            Button 4 左侧前方按键</span></span><br><span class="line"><span class="string">            Button 5 右侧前方按键</span></span><br><span class="line"><span class="string">            Button 6 back</span></span><br><span class="line"><span class="string">            Button 7 start</span></span><br><span class="line"><span class="string">            Button 8 左摇杆按键</span></span><br><span class="line"><span class="string">            Button 7 右摇杆按键</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line"></span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            myMotor1 垂直方向，控制上下</span></span><br><span class="line"><span class="string">            myMotor2 水平方向，控制前后</span></span><br><span class="line"><span class="string">            myMotor3 水平方向，控制左右</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 左前侧按键 下移</span></span><br><span class="line">            button5 = stick.get_button(<span class="number">5</span>)</span><br><span class="line">            print(button5)</span><br><span class="line">            <span class="keyword">if</span>(button5 != <span class="number">0</span>):</span><br><span class="line">                move_forward(myMotor1, <span class="number">256</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor1)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 右前侧按键 上移</span></span><br><span class="line">            button4 = stick.get_button(<span class="number">4</span>)</span><br><span class="line">            print(button4)</span><br><span class="line">            <span class="keyword">if</span>(button4 != <span class="number">0</span>):</span><br><span class="line">                move_backward(myMotor1, <span class="number">256</span>)</span><br><span class="line">                <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor1)</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># X 左移</span></span><br><span class="line">            button2 = stick.get_button(<span class="number">2</span>)</span><br><span class="line">            print(button2)</span><br><span class="line">            <span class="keyword">if</span>(button2 != <span class="number">0</span>):</span><br><span class="line">                move_backward(myMotor2, <span class="number">256</span>)</span><br><span class="line">                <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># B 右移</span></span><br><span class="line">            button1 = stick.get_button(<span class="number">1</span>)</span><br><span class="line">            print(button1)</span><br><span class="line">            <span class="keyword">if</span>(button1 != <span class="number">0</span>):</span><br><span class="line">                move_forward(myMotor2, <span class="number">256</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Y 前移</span></span><br><span class="line">            button3 = stick.get_button(<span class="number">3</span>)</span><br><span class="line">            print(button3)</span><br><span class="line">            <span class="keyword">if</span>(button3 != <span class="number">0</span>):</span><br><span class="line">                move_backward(myMotor3, <span class="number">256</span>)</span><br><span class="line">                <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor3)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># A 后移</span></span><br><span class="line">            button0 = stick.get_button(<span class="number">0</span>)</span><br><span class="line">            print(button0)</span><br><span class="line">            <span class="keyword">if</span>(button0 != <span class="number">0</span>):</span><br><span class="line">                move_forward(myMotor3, <span class="number">256</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                move_release(myMotor3)</span><br><span class="line">            </span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        os.system(<span class="string">'clear'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        turnOffAllMotors()</span><br></pre></td></tr></table></figure><p>Adafruit_PWM_Servo_Driver.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Adafruit_PWM_Servo_Driver <span class="keyword">import</span> PWM</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adafruit_StepperMotor</span>:</span></span><br><span class="line">MICROSTEPS = <span class="number">8</span></span><br><span class="line">MICROSTEP_CURVE = [<span class="number">0</span>, <span class="number">50</span>, <span class="number">98</span>, <span class="number">142</span>, <span class="number">180</span>, <span class="number">212</span>, <span class="number">236</span>, <span class="number">250</span>, <span class="number">255</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#MICROSTEPS = 16</span></span><br><span class="line"><span class="comment"># a sinusoidal curve NOT LINEAR!</span></span><br><span class="line"><span class="comment">#MICROSTEP_CURVE = [0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, controller, num, steps=<span class="number">200</span>)</span>:</span></span><br><span class="line">self.MC = controller</span><br><span class="line">self.revsteps = steps</span><br><span class="line">self.motornum = num</span><br><span class="line">self.sec_per_step = <span class="number">0.1</span></span><br><span class="line">self.steppingcounter = <span class="number">0</span></span><br><span class="line">self.currentstep = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>):</span><br><span class="line">self.PWMA = <span class="number">8</span></span><br><span class="line">self.AIN2 = <span class="number">9</span></span><br><span class="line">self.AIN1 = <span class="number">10</span></span><br><span class="line">self.PWMB = <span class="number">13</span></span><br><span class="line">self.BIN2 = <span class="number">12</span></span><br><span class="line">self.BIN1 = <span class="number">11</span></span><br><span class="line"><span class="keyword">elif</span> (num == <span class="number">1</span>):</span><br><span class="line">self.PWMA = <span class="number">2</span></span><br><span class="line">self.AIN2 = <span class="number">3</span></span><br><span class="line">self.AIN1 = <span class="number">4</span></span><br><span class="line">self.PWMB = <span class="number">7</span></span><br><span class="line">self.BIN2 = <span class="number">6</span></span><br><span class="line">self.BIN1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'MotorHAT Stepper must be between 1 and 2 inclusive'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setSpeed</span><span class="params">(self, rpm)</span>:</span></span><br><span class="line">self.sec_per_step = <span class="number">60.0</span> / (self.revsteps * rpm)</span><br><span class="line">self.steppingcounter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oneStep</span><span class="params">(self, dir, style)</span>:</span></span><br><span class="line">pwm_a = pwm_b = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># first determine what sort of stepping procedure we're up to</span></span><br><span class="line"><span class="keyword">if</span> (style == Adafruit_MotorHAT.SINGLE):</span><br><span class="line">    <span class="keyword">if</span> ((self.currentstep/(self.MICROSTEPS/<span class="number">2</span>)) % <span class="number">2</span>): </span><br><span class="line"><span class="comment"># we're at an odd step, weird</span></span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># go to next even step</span></span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += self.MICROSTEPS</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= self.MICROSTEPS</span><br><span class="line"><span class="keyword">if</span> (style == Adafruit_MotorHAT.DOUBLE):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (self.currentstep/(self.MICROSTEPS/<span class="number">2</span>) % <span class="number">2</span>):</span><br><span class="line"><span class="comment"># we're at an even step, weird</span></span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># go to next odd step</span></span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += self.MICROSTEPS</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= self.MICROSTEPS</span><br><span class="line"><span class="keyword">if</span> (style == Adafruit_MotorHAT.INTERLEAVE):</span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= self.MICROSTEPS/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (style == Adafruit_MotorHAT.MICROSTEP):</span><br><span class="line"><span class="keyword">if</span> (dir == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.currentstep += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.currentstep -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># go to next 'step' and wrap around</span></span><br><span class="line">                self.currentstep += self.MICROSTEPS * <span class="number">4</span></span><br><span class="line">                self.currentstep %= self.MICROSTEPS * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">pwm_a = pwm_b = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (self.currentstep &gt;= <span class="number">0</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS):</span><br><span class="line">pwm_a = self.MICROSTEP_CURVE[self.MICROSTEPS - self.currentstep]</span><br><span class="line">pwm_b = self.MICROSTEP_CURVE[self.currentstep]</span><br><span class="line"><span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">2</span>):</span><br><span class="line">pwm_a = self.MICROSTEP_CURVE[self.currentstep - self.MICROSTEPS]</span><br><span class="line">pwm_b = self.MICROSTEP_CURVE[self.MICROSTEPS*<span class="number">2</span> - self.currentstep]</span><br><span class="line"><span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS*<span class="number">2</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">3</span>):</span><br><span class="line">pwm_a = self.MICROSTEP_CURVE[self.MICROSTEPS*<span class="number">3</span> - self.currentstep]</span><br><span class="line">pwm_b = self.MICROSTEP_CURVE[self.currentstep - self.MICROSTEPS*<span class="number">2</span>]</span><br><span class="line"><span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS*<span class="number">3</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">4</span>):</span><br><span class="line">                                pwm_a = self.MICROSTEP_CURVE[self.currentstep - self.MICROSTEPS*<span class="number">3</span>]</span><br><span class="line">                                pwm_b = self.MICROSTEP_CURVE[self.MICROSTEPS*<span class="number">4</span> - self.currentstep]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># go to next 'step' and wrap around</span></span><br><span class="line">self.currentstep += self.MICROSTEPS * <span class="number">4</span></span><br><span class="line">self.currentstep %= self.MICROSTEPS * <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only really used for microstepping, otherwise always on!</span></span><br><span class="line">self.MC._pwm.setPWM(self.PWMA, <span class="number">0</span>, pwm_a*<span class="number">16</span>)</span><br><span class="line">self.MC._pwm.setPWM(self.PWMB, <span class="number">0</span>, pwm_b*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set up coil energizing!</span></span><br><span class="line">coils = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (style == Adafruit_MotorHAT.MICROSTEP):</span><br><span class="line"><span class="keyword">if</span> (self.currentstep &gt;= <span class="number">0</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS):</span><br><span class="line">coils = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">2</span>):</span><br><span class="line">coils = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS*<span class="number">2</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">3</span>):</span><br><span class="line">coils = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">elif</span> (self.currentstep &gt;= self.MICROSTEPS*<span class="number">3</span>) <span class="keyword">and</span> (self.currentstep &lt; self.MICROSTEPS*<span class="number">4</span>):</span><br><span class="line">coils = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">step2coils = [ [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] ]</span><br><span class="line">coils = step2coils[self.currentstep/(self.MICROSTEPS/<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print "coils state = " + str(coils)</span></span><br><span class="line">self.MC.setPin(self.AIN2, coils[<span class="number">0</span>])</span><br><span class="line">self.MC.setPin(self.BIN1, coils[<span class="number">1</span>])</span><br><span class="line">self.MC.setPin(self.AIN1, coils[<span class="number">2</span>])</span><br><span class="line">self.MC.setPin(self.BIN2, coils[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.currentstep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(self, steps, direction, stepstyle)</span>:</span></span><br><span class="line">s_per_s = self.sec_per_step</span><br><span class="line">lateststep = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stepstyle == Adafruit_MotorHAT.INTERLEAVE):</span><br><span class="line">s_per_s = s_per_s / <span class="number">2.0</span></span><br><span class="line"><span class="keyword">if</span> (stepstyle == Adafruit_MotorHAT.MICROSTEP):</span><br><span class="line">s_per_s /= self.MICROSTEPS</span><br><span class="line">steps *= self.MICROSTEPS</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> s_per_s, <span class="string">" sec per step"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(steps):</span><br><span class="line">lateststep = self.oneStep(direction, stepstyle)</span><br><span class="line">time.sleep(s_per_s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stepstyle == Adafruit_MotorHAT.MICROSTEP):</span><br><span class="line"><span class="comment"># this is an edge case, if we are in between full steps, lets just keep going</span></span><br><span class="line"><span class="comment"># so we end on a full step</span></span><br><span class="line"><span class="keyword">while</span> (lateststep != <span class="number">0</span>) <span class="keyword">and</span> (lateststep != self.MICROSTEPS):</span><br><span class="line">lateststep = self.oneStep(dir, stepstyle)</span><br><span class="line">time.sleep(s_per_s)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adafruit_DCMotor</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, controller, num)</span>:</span></span><br><span class="line">self.MC = controller</span><br><span class="line">self.motornum = num</span><br><span class="line">                pwm = in1 = in2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>):</span><br><span class="line">                         pwm = <span class="number">8</span></span><br><span class="line">                         in2 = <span class="number">9</span></span><br><span class="line">                         in1 = <span class="number">10</span></span><br><span class="line">                <span class="keyword">elif</span> (num == <span class="number">1</span>):</span><br><span class="line">                         pwm = <span class="number">13</span></span><br><span class="line">                         in2 = <span class="number">12</span></span><br><span class="line">                         in1 = <span class="number">11</span></span><br><span class="line">                <span class="keyword">elif</span> (num == <span class="number">2</span>):</span><br><span class="line">                         pwm = <span class="number">2</span></span><br><span class="line">                         in2 = <span class="number">3</span></span><br><span class="line">                         in1 = <span class="number">4</span></span><br><span class="line">                <span class="keyword">elif</span> (num == <span class="number">3</span>):</span><br><span class="line">                         pwm = <span class="number">7</span></span><br><span class="line">                         in2 = <span class="number">6</span></span><br><span class="line">                         in1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'MotorHAT Motor must be between 1 and 4 inclusive'</span>)</span><br><span class="line">                self.PWMpin = pwm</span><br><span class="line">                self.IN1pin = in1</span><br><span class="line">                self.IN2pin = in2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, command)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.MC:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> (command == Adafruit_MotorHAT.FORWARD):</span><br><span class="line">self.MC.setPin(self.IN2pin, <span class="number">0</span>)</span><br><span class="line">self.MC.setPin(self.IN1pin, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (command == Adafruit_MotorHAT.BACKWARD):</span><br><span class="line">self.MC.setPin(self.IN1pin, <span class="number">0</span>)</span><br><span class="line">self.MC.setPin(self.IN2pin, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (command == Adafruit_MotorHAT.RELEASE):</span><br><span class="line">self.MC.setPin(self.IN1pin, <span class="number">0</span>)</span><br><span class="line">self.MC.setPin(self.IN2pin, <span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setSpeed</span><span class="params">(self, speed)</span>:</span></span><br><span class="line"><span class="keyword">if</span> (speed &lt; <span class="number">0</span>):</span><br><span class="line">speed = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (speed &gt; <span class="number">255</span>):</span><br><span class="line">speed = <span class="number">255</span></span><br><span class="line">self.MC._pwm.setPWM(self.PWMpin, <span class="number">0</span>, speed*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adafruit_MotorHAT</span>:</span></span><br><span class="line">FORWARD = <span class="number">1</span></span><br><span class="line">BACKWARD = <span class="number">2</span></span><br><span class="line">BRAKE = <span class="number">3</span></span><br><span class="line">RELEASE = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SINGLE = <span class="number">1</span></span><br><span class="line">DOUBLE = <span class="number">2</span></span><br><span class="line">INTERLEAVE = <span class="number">3</span></span><br><span class="line">MICROSTEP = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr = <span class="number">0x60</span>, freq = <span class="number">1600</span>)</span>:</span></span><br><span class="line">self._i2caddr = addr            <span class="comment"># default addr on HAT</span></span><br><span class="line">self._frequency = freq<span class="comment"># default @1600Hz PWM freq</span></span><br><span class="line">self.motors = [ Adafruit_DCMotor(self, m) <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">4</span>) ]</span><br><span class="line">self.steppers = [ Adafruit_StepperMotor(self, <span class="number">1</span>), Adafruit_StepperMotor(self, <span class="number">2</span>) ]</span><br><span class="line">self._pwm =  PWM(addr, debug=<span class="keyword">False</span>)</span><br><span class="line">self._pwm.setPWMFreq(self._frequency)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setPin</span><span class="params">(self, pin, value)</span>:</span></span><br><span class="line"><span class="keyword">if</span> (pin &lt; <span class="number">0</span>) <span class="keyword">or</span> (pin &gt; <span class="number">15</span>):</span><br><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'PWM pin must be between 0 and 15 inclusive'</span>)</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>) <span class="keyword">and</span> (value != <span class="number">1</span>):</span><br><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'Pin value must be 0 or 1!'</span>)</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">0</span>):</span><br><span class="line">self._pwm.setPWM(pin, <span class="number">0</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>):</span><br><span class="line">self._pwm.setPWM(pin, <span class="number">4096</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStepper</span><span class="params">(self, steps, num)</span>:</span></span><br><span class="line">                <span class="keyword">if</span> (num &lt; <span class="number">1</span>) <span class="keyword">or</span> (num &gt; <span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">raise</span> NameError(<span class="string">'MotorHAT Stepper must be between 1 and 2 inclusive'</span>)</span><br><span class="line"><span class="keyword">return</span> self.steppers[num<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMotor</span><span class="params">(self, num)</span>:</span></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">1</span>) <span class="keyword">or</span> (num &gt; <span class="number">4</span>):</span><br><span class="line"><span class="keyword">raise</span> NameError(<span class="string">'MotorHAT Motor must be between 1 and 4 inclusive'</span>)</span><br><span class="line"><span class="keyword">return</span> self.motors[num<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><p>Adafruit_MotorHAT.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> Adafruit_I2C <span class="keyword">import</span> Adafruit_I2C</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================</span></span><br><span class="line"><span class="comment"># Adafruit PCA9685 16-Channel PWM Servo Driver</span></span><br><span class="line"><span class="comment"># ============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PWM</span> :</span></span><br><span class="line">  <span class="comment"># Registers/etc.</span></span><br><span class="line">  __MODE1              = <span class="number">0x00</span></span><br><span class="line">  __MODE2              = <span class="number">0x01</span></span><br><span class="line">  __SUBADR1            = <span class="number">0x02</span></span><br><span class="line">  __SUBADR2            = <span class="number">0x03</span></span><br><span class="line">  __SUBADR3            = <span class="number">0x04</span></span><br><span class="line">  __PRESCALE           = <span class="number">0xFE</span></span><br><span class="line">  __LED0_ON_L          = <span class="number">0x06</span></span><br><span class="line">  __LED0_ON_H          = <span class="number">0x07</span></span><br><span class="line">  __LED0_OFF_L         = <span class="number">0x08</span></span><br><span class="line">  __LED0_OFF_H         = <span class="number">0x09</span></span><br><span class="line">  __ALL_LED_ON_L       = <span class="number">0xFA</span></span><br><span class="line">  __ALL_LED_ON_H       = <span class="number">0xFB</span></span><br><span class="line">  __ALL_LED_OFF_L      = <span class="number">0xFC</span></span><br><span class="line">  __ALL_LED_OFF_H      = <span class="number">0xFD</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Bits</span></span><br><span class="line">  __RESTART            = <span class="number">0x80</span></span><br><span class="line">  __SLEEP              = <span class="number">0x10</span></span><br><span class="line">  __ALLCALL            = <span class="number">0x01</span></span><br><span class="line">  __INVRT              = <span class="number">0x10</span></span><br><span class="line">  __OUTDRV             = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line">  general_call_i2c = Adafruit_I2C(<span class="number">0x00</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">softwareReset</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"Sends a software reset (SWRST) command to all the servo drivers on the bus"</span></span><br><span class="line">    cls.general_call_i2c.writeRaw8(<span class="number">0x06</span>)        <span class="comment"># SWRST</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address=<span class="number">0x40</span>, debug=False)</span>:</span></span><br><span class="line">    self.i2c = Adafruit_I2C(address)</span><br><span class="line">    self.i2c.debug = debug</span><br><span class="line">    self.address = address</span><br><span class="line">    self.debug = debug</span><br><span class="line">    <span class="keyword">if</span> (self.debug):</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Reseting PCA9685 MODE1 (without SLEEP) and MODE2"</span></span><br><span class="line">    self.setAllPWM(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    self.i2c.write8(self.__MODE2, self.__OUTDRV)</span><br><span class="line">    self.i2c.write8(self.__MODE1, self.__ALLCALL)</span><br><span class="line">    time.sleep(<span class="number">0.005</span>)                                       <span class="comment"># wait for oscillator</span></span><br><span class="line">    </span><br><span class="line">    mode1 = self.i2c.readU8(self.__MODE1)</span><br><span class="line">    mode1 = mode1 &amp; ~self.__SLEEP                 <span class="comment"># wake up (reset sleep)</span></span><br><span class="line">    self.i2c.write8(self.__MODE1, mode1)</span><br><span class="line">    time.sleep(<span class="number">0.005</span>)                             <span class="comment"># wait for oscillator</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setPWMFreq</span><span class="params">(self, freq)</span>:</span></span><br><span class="line">    <span class="string">"Sets the PWM frequency"</span></span><br><span class="line">    prescaleval = <span class="number">25000000.0</span>    <span class="comment"># 25MHz</span></span><br><span class="line">    prescaleval /= <span class="number">4096.0</span>       <span class="comment"># 12-bit</span></span><br><span class="line">    prescaleval /= float(freq)</span><br><span class="line">    prescaleval -= <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">if</span> (self.debug):</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Setting PWM frequency to %d Hz"</span> % freq</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Estimated pre-scale: %d"</span> % prescaleval</span><br><span class="line">    prescale = math.floor(prescaleval + <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> (self.debug):</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Final pre-scale: %d"</span> % prescale</span><br><span class="line"></span><br><span class="line">    oldmode = self.i2c.readU8(self.__MODE1);</span><br><span class="line">    newmode = (oldmode &amp; <span class="number">0x7F</span>) | <span class="number">0x10</span>             <span class="comment"># sleep</span></span><br><span class="line">    self.i2c.write8(self.__MODE1, newmode)        <span class="comment"># go to sleep</span></span><br><span class="line">    self.i2c.write8(self.__PRESCALE, int(math.floor(prescale)))</span><br><span class="line">    self.i2c.write8(self.__MODE1, oldmode)</span><br><span class="line">    time.sleep(<span class="number">0.005</span>)</span><br><span class="line">    self.i2c.write8(self.__MODE1, oldmode | <span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setPWM</span><span class="params">(self, channel, on, off)</span>:</span></span><br><span class="line">    <span class="string">"Sets a single PWM channel"</span></span><br><span class="line">    self.i2c.write8(self.__LED0_ON_L+<span class="number">4</span>*channel, on &amp; <span class="number">0xFF</span>)</span><br><span class="line">    self.i2c.write8(self.__LED0_ON_H+<span class="number">4</span>*channel, on &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    self.i2c.write8(self.__LED0_OFF_L+<span class="number">4</span>*channel, off &amp; <span class="number">0xFF</span>)</span><br><span class="line">    self.i2c.write8(self.__LED0_OFF_H+<span class="number">4</span>*channel, off &gt;&gt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setAllPWM</span><span class="params">(self, on, off)</span>:</span></span><br><span class="line">    <span class="string">"Sets a all PWM channels"</span></span><br><span class="line">    self.i2c.write8(self.__ALL_LED_ON_L, on &amp; <span class="number">0xFF</span>)</span><br><span class="line">    self.i2c.write8(self.__ALL_LED_ON_H, on &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    self.i2c.write8(self.__ALL_LED_OFF_L, off &amp; <span class="number">0xFF</span>)</span><br><span class="line">    self.i2c.write8(self.__ALL_LED_OFF_H, off &gt;&gt; <span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>Adafruit_I2C.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> smbus</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========================================================================</span></span><br><span class="line"><span class="comment"># Adafruit_I2C Class</span></span><br><span class="line"><span class="comment"># ===========================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adafruit_I2C</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getPiRevision</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"Gets the version number of the Raspberry Pi board"</span></span><br><span class="line">    <span class="comment"># Revision list available at: http://elinux.org/RPi_HardwareHistory#Board_Revision_History</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">with</span> open(<span class="string">'/proc/cpuinfo'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> infile:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">          <span class="comment"># Match a line of the form "Revision : 0002" while ignoring extra</span></span><br><span class="line">          <span class="comment"># info in front of the revsion (like 1000 when the Pi was over-volted).</span></span><br><span class="line">          match = re.match(<span class="string">'Revision\s+:\s+.*(\w&#123;4&#125;)$'</span>, line)</span><br><span class="line">          <span class="keyword">if</span> match <span class="keyword">and</span> match.group(<span class="number">1</span>) <span class="keyword">in</span> [<span class="string">'0000'</span>, <span class="string">'0002'</span>, <span class="string">'0003'</span>]:</span><br><span class="line">            <span class="comment"># Return revision 1 if revision ends with 0000, 0002 or 0003.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">          <span class="keyword">elif</span> match:</span><br><span class="line">            <span class="comment"># Assume revision 2 if revision ends with any other 4 chars.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="comment"># Couldn't find the revision, assume revision 0 like older code for compatibility.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getPiI2CBusNumber</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Gets the I2C bus number /dev/i2c#</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> Adafruit_I2C.getPiRevision() &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, busnum=<span class="number">-1</span>, debug=False)</span>:</span></span><br><span class="line">    self.address = address</span><br><span class="line">    <span class="comment"># By default, the correct I2C bus is auto-detected using /proc/cpuinfo</span></span><br><span class="line">    <span class="comment"># Alternatively, you can hard-code the bus version below:</span></span><br><span class="line">    <span class="comment"># self.bus = smbus.SMBus(0); # Force I2C0 (early 256MB Pi's)</span></span><br><span class="line">    <span class="comment"># self.bus = smbus.SMBus(1); # Force I2C1 (512MB Pi's)</span></span><br><span class="line">    self.bus = smbus.SMBus(busnum <span class="keyword">if</span> busnum &gt;= <span class="number">0</span> <span class="keyword">else</span> Adafruit_I2C.getPiI2CBusNumber())</span><br><span class="line">    self.debug = debug</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reverseByteOrder</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">"Reverses the byte order of an int (16-bit) or long (32-bit) value"</span></span><br><span class="line">    <span class="comment"># Courtesy Vishal Sapre</span></span><br><span class="line">    byteCount = len(hex(data)[<span class="number">2</span>:].replace(<span class="string">'L'</span>,<span class="string">''</span>)[::<span class="number">2</span>])</span><br><span class="line">    val       = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(byteCount):</span><br><span class="line">      val    = (val &lt;&lt; <span class="number">8</span>) | (data &amp; <span class="number">0xff</span>)</span><br><span class="line">      data &gt;&gt;= <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">errMsg</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error accessing 0x%02X: Check your I2C address"</span> % self.address</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">write8</span><span class="params">(self, reg, value)</span>:</span></span><br><span class="line">    <span class="string">"Writes an 8-bit value to the specified register/address"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      self.bus.write_byte_data(self.address, reg, value)</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I2C: Wrote 0x%02X to register 0x%02X"</span> % (value, reg)</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">write16</span><span class="params">(self, reg, value)</span>:</span></span><br><span class="line">    <span class="string">"Writes a 16-bit value to the specified register/address pair"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      self.bus.write_word_data(self.address, reg, value)</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"I2C: Wrote 0x%02X to register pair 0x%02X,0x%02X"</span> %</span><br><span class="line">         (value, reg, reg+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">writeRaw8</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="string">"Writes an 8-bit value on the bus"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      self.bus.write_byte(self.address, value)</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I2C: Wrote 0x%02X"</span> % value</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">writeList</span><span class="params">(self, reg, list)</span>:</span></span><br><span class="line">    <span class="string">"Writes an array of bytes using I2C format"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I2C: Writing list to register 0x%02X:"</span> % reg</span><br><span class="line">        <span class="keyword">print</span> list</span><br><span class="line">      self.bus.write_i2c_block_data(self.address, reg, list)</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readList</span><span class="params">(self, reg, length)</span>:</span></span><br><span class="line">    <span class="string">"Read a list of bytes from the I2C device"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      results = self.bus.read_i2c_block_data(self.address, reg, length)</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"I2C: Device 0x%02X returned the following from reg 0x%02X"</span> %</span><br><span class="line">         (self.address, reg))</span><br><span class="line">        <span class="keyword">print</span> results</span><br><span class="line">      <span class="keyword">return</span> results</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readU8</span><span class="params">(self, reg)</span>:</span></span><br><span class="line">    <span class="string">"Read an unsigned byte from the I2C device"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      result = self.bus.read_byte_data(self.address, reg)</span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"I2C: Device 0x%02X returned 0x%02X from reg 0x%02X"</span> %</span><br><span class="line">         (self.address, result &amp; <span class="number">0xFF</span>, reg))</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readS8</span><span class="params">(self, reg)</span>:</span></span><br><span class="line">    <span class="string">"Reads a signed byte from the I2C device"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      result = self.bus.read_byte_data(self.address, reg)</span><br><span class="line">      <span class="keyword">if</span> result &gt; <span class="number">127</span>: result -= <span class="number">256</span></span><br><span class="line">      <span class="keyword">if</span> self.debug:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"I2C: Device 0x%02X returned 0x%02X from reg 0x%02X"</span> %</span><br><span class="line">         (self.address, result &amp; <span class="number">0xFF</span>, reg))</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readU16</span><span class="params">(self, reg, little_endian=True)</span>:</span></span><br><span class="line">    <span class="string">"Reads an unsigned 16-bit value from the I2C device"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      result = self.bus.read_word_data(self.address,reg)</span><br><span class="line">      <span class="comment"># Swap bytes if using big endian because read_word_data assumes little </span></span><br><span class="line">      <span class="comment"># endian on ARM (little endian) systems.</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> little_endian:</span><br><span class="line">        result = ((result &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) + (result &gt;&gt; <span class="number">8</span>)</span><br><span class="line">      <span class="keyword">if</span> (self.debug):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I2C: Device 0x%02X returned 0x%04X from reg 0x%02X"</span> % (self.address, result &amp; <span class="number">0xFFFF</span>, reg)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readS16</span><span class="params">(self, reg, little_endian=True)</span>:</span></span><br><span class="line">    <span class="string">"Reads a signed 16-bit value from the I2C device"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      result = self.readU16(reg,little_endian)</span><br><span class="line">      <span class="keyword">if</span> result &gt; <span class="number">32767</span>: result -= <span class="number">65536</span></span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> IOError, err:</span><br><span class="line">      <span class="keyword">return</span> self.errMsg()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    bus = Adafruit_I2C(address=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Default I2C bus is accessible"</span></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error accessing default I2C bus"</span></span><br></pre></td></tr></table></figure></p><p>__init__.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .Adafruit_MotorHAT <span class="keyword">import</span> Adafruit_StepperMotor, Adafruit_DCMotor, Adafruit_MotorHAT</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树莓派Python入门&quot;&gt;&lt;a href=&quot;#树莓派Python入门&quot; class=&quot;headerlink&quot; title=&quot;树莓派Python入门&quot;&gt;&lt;/a&gt;树莓派Python入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;目标：按下按键，转动对应马达&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="programme" scheme="http://zzjoeyyy.com/tags/programme/"/>
    
  </entry>
  
  <entry>
    <title>这样的程序员创业有戏</title>
    <link href="http://zzjoeyyy.com/2018/11/15/%E9%9B%B7%E5%86%9B%EF%BC%9A%E8%BF%99%E6%A0%B7%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%9B%E4%B8%9A%E6%9C%89%E6%88%8F/"/>
    <id>http://zzjoeyyy.com/2018/11/15/雷军：这样的程序员创业有戏/</id>
    <published>2018-11-15T06:15:14.000Z</published>
    <updated>2018-11-15T06:37:32.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雷军：这样的程序员创业有戏（转）"><a href="#雷军：这样的程序员创业有戏（转）" class="headerlink" title="雷军：这样的程序员创业有戏（转）"></a>雷军：这样的程序员创业有戏（转）</h1><p>这是我为12月4日开始的“2008软件开发2.0技术大会”准备的讲稿。到了现场，我发现这个讲稿对现场近千人的技术高手不适合，只好临时讲了移动互联网的趋势。  </p><a id="more"></a><h3 id="致刚入门的程序员五点建议"><a href="#致刚入门的程序员五点建议" class="headerlink" title="致刚入门的程序员五点建议"></a>致刚入门的程序员五点建议</h3><p>每个IT企业，尤其是初创企业，非常苦恼：找不到好的程序员。现在大学、软件学院及各种培训机构，每年培养几十万的程序员，毕业的每个人都有同样困恼：找不到好的工作。问题出在哪里呢？其实，企业需要的是不是刚会写程序的人，需要来了就能干活的人，尤其能把活干好的人。而刚毕业的大学生多半刚学会如何写程序，的确很难企业需求。  </p><p>企业到底需要什么样的程序员，一个刚入门的程序员如何成为企业需要的高手呢？还有很多程序员问我，“我需要具备什么样的能力就可以去创业？”我一直在琢磨类似的问题。我自己写过十年程序，也在金山管理过一千多人的研发队伍，最近也在做天使投资，仔细总结了如下五点建议与所有程序员分享。  </p><h5 id="建议一、只有真正喜欢才能写好程序-喜欢写程序，做程序员就是上天堂；不喜欢写程序，做程序员就是下地狱。"><a href="#建议一、只有真正喜欢才能写好程序-喜欢写程序，做程序员就是上天堂；不喜欢写程序，做程序员就是下地狱。" class="headerlink" title="建议一、只有真正喜欢才能写好程序  喜欢写程序，做程序员就是上天堂；不喜欢写程序，做程序员就是下地狱。"></a>建议一、只有真正喜欢才能写好程序  喜欢写程序，做程序员就是上天堂；不喜欢写程序，做程序员就是下地狱。</h5><p>程序员需要整天趴在电脑前，经常没日没夜的，非常辛苦，而且工作来不得半点虚假，少写一个标点符号都不行。喜欢的人，日子过得非常开心，每写一行代码，都会有新的成就，尤其当自己的作品被广泛应用的时候，那种自豪感油然而起。不喜欢的人，坐在电脑前极端无聊，被进度压得喘不过气来，天天为找bug改bug生气。  </p><p>只有喜欢，只有热爱，才能把程序写好！  我建议不喜欢写程序的人早点转行，不要勉强自己，免得误人误己。 </p><h5 id="建议二、把程序当艺术品，象写诗一样来写代码"><a href="#建议二、把程序当艺术品，象写诗一样来写代码" class="headerlink" title="建议二、把程序当艺术品，象写诗一样来写代码"></a>建议二、把程序当艺术品，象写诗一样来写代码</h5><p>现在很少有公司做 codeview （对写好的程序做代码级检查），于是很多人在进度的压力下潦草应付，只要测试通过就算搞定。表面上看，开发速度很快，进度有保障；但实际上，这样的程序连开发者自己都很难读懂，一旦有bug，很难调试，将来维护升级都非常困难。这样的代码多半只能重写，浪费自然严重。  </p><p>如果每个人写程序的时候当艺术品来写，写每行都认认真真、干干净净的，虽然速度略微慢了一点，但综合的开发成本会低很多。  </p><p>如何写象诗一样美的代码呢？方法也很简单。 </p><p>买几本经典的编程书，把书上所有例程全部重新写一遍，逐个比较和书上范例的差距，一步一步改善自己编程的风格和技巧。时间长了，自然就能写出象书上例程一样的代码，甚至可以比书上写得好。 基础扎实后，多看看Linux 等系统级的源代码，看看高手是如何写的，就有感觉了。 通读一下MSDN中所有的资料，这样，“读书破万卷，下笔如有神”。  </p><p>还有，一定要牢记软件工程的铁律：可能出错的地方一定会出错。每个变量都做初始化，引用每个参数都会做有效性检查，在可能出错的每个地方都会做边界条件检查，这样开发出来的程序一定会稳固很多，就是出错也会很容易修改。野路子出来的高手，一般开发速度很快，但做完后bug很多，经常需要很长时间修改。而真正的高手，追求的境界是 bugfree code（零缺陷代码）。  </p><h5 id="建议三、必须写够十万行代码，不要心存侥幸"><a href="#建议三、必须写够十万行代码，不要心存侥幸" class="headerlink" title="建议三、必须写够十万行代码，不要心存侥幸"></a>建议三、必须写够十万行代码，不要心存侥幸</h5><p>程序员象木工一样，熟能生巧。程序员必须写足够代码量的程序，才会有感觉，这是一个苦力活，没有任何捷径可走。  </p><p>计算机是一门实践性的科学，没有动手能力做支撑，很难做出好的科研成果。我的一个学长是美国卡内基梅隆大学的博士，卡内基梅隆大学计算机系在全世界非常出名，他说每个博士生必须写十万行代码才能毕业，卡内基梅隆大学博士进任何一个大企业基本不用面试。而国内培养大部分的研究生、博士生，动手能力都偏弱。 </p><p>没有写过足够代码量的，想成为高手是不可能的，只能纸上谈兵！  </p><h5 id="建议四、时刻保持好奇心"><a href="#建议四、时刻保持好奇心" class="headerlink" title="建议四、时刻保持好奇心"></a>建议四、时刻保持好奇心</h5><p>计算机技术更新换代非常快，每年都有各种各样的新技术出现。在我过去的职业生涯中，仅编程语言，我就用过 basic、masm、pascal、c++、vba、Delphi、java 等。需要时刻保持好奇心，不断学习各种新的东西，才能在未来的几十年职业生涯中不落伍。你要理解为什么 iPhone 出来很多高手用iPhone，现在一天到晚惦记着换部 gPhone 玩玩。  </p><p>人的精力有效，高手往往工作压力也比较大，如何在有限的时间内掌握整个行业动态，的确是一个不简单的事情。我的经验是经常看业内的各种技术杂志，参加各种聚会，可以节约很多时间。最重要的是，交几个博学的技术高手，多和他们交流，一定获益匪浅！  </p><h5 id="建议五、不要局限在技术本身，多花点精力关注用户"><a href="#建议五、不要局限在技术本身，多花点精力关注用户" class="headerlink" title="建议五、不要局限在技术本身，多花点精力关注用户"></a>建议五、不要局限在技术本身，多花点精力关注用户</h5><p>做到前面几条，就已经是千金难求的高手了。但一个真正的高手需要知道用户需要什么，如何做出让用户满意的产品。  </p><p>现在的软件研发越来越强烈团队协作，不少团队都配置了专门的需求分析的工程师、用户界面及用户体验的设计师，软件研发的分工越来越细。很多程序员以为只要把技术搞好，不用管用户需求和用户体验。实际上，需求方案及界面方案不可能写得非常细，具体的实施还是程序员自己来实现的。这个时候，好坏的差距很快就体现出来了。  </p><p>我们写程序的最终目的是满足用户需求，不是简单完成需求规划方案中的功能。所以，程序员一定要认真揣摩用户心理，能明白用户的真实需求。  </p><p>其次，怎么设计交互界面，让用户觉得好用，用起来舒服，这里面学问很大。我举一个小例子，每个程序窗口右上角都有三个按钮，如最小化、关闭等。乔布斯觉得不好看，不易用，他提出改用红绿蓝的交通灯。这样修改后，果然 Mac OS 漂亮和易用了很多。  </p><p>目前互联网和手机上的应用开发，都非常强调小团队研发。这样研发模式速度会快很多，但对程序员的综合素质的要求也就更高了。  </p><p>我强烈建议程序员不要仅仅局限在技术本事，还需要多点精力考虑和用户相关的问题，学会洞察用户的需求，并努力设计好用易用的产品。做着这点的程序高手，创业成算就很大了。  </p><p>这些就是我说的《创业十大标准》中提到的“技术过硬”要求。  </p><p>这样的技术高手，如果捕捉到合适的产品方向，并且具备一定带团队的能力，创业成功机会很大！事实上，绝大部分创业的技术公司，创始人都是这样的人！比如迅雷的邹胜龙和程浩，UCWEB的何小鹏和梁捷等</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;雷军：这样的程序员创业有戏（转）&quot;&gt;&lt;a href=&quot;#雷军：这样的程序员创业有戏（转）&quot; class=&quot;headerlink&quot; title=&quot;雷军：这样的程序员创业有戏（转）&quot;&gt;&lt;/a&gt;雷军：这样的程序员创业有戏（转）&lt;/h1&gt;&lt;p&gt;这是我为12月4日开始的“2008软件开发2.0技术大会”准备的讲稿。到了现场，我发现这个讲稿对现场近千人的技术高手不适合，只好临时讲了移动互联网的趋势。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://zzjoeyyy.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zzjoeyyy.com/2018/11/15/hello-world/"/>
    <id>http://zzjoeyyy.com/2018/11/15/hello-world/</id>
    <published>2018-11-15T05:50:27.000Z</published>
    <updated>2018-11-15T06:22:36.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zzjoeyyy"><a href="#zzjoeyyy" class="headerlink" title="zzjoeyyy"></a>zzjoeyyy</h1><p><a href="http://zzjoeyyy.com">zzjoeyyy.com</a><br><a href="http://zzjoeyyy.github.io" target="_blank" rel="noopener">zzjoeyyy.github.io</a></p><ol><li>move to github</li><li>add personal domain</li><li>start happy coding</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zzjoeyyy&quot;&gt;&lt;a href=&quot;#zzjoeyyy&quot; class=&quot;headerlink&quot; title=&quot;zzjoeyyy&quot;&gt;&lt;/a&gt;zzjoeyyy&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://zzjoeyyy.com&quot;&gt;zzjoeyyy.com&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://zzjoeyyy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
